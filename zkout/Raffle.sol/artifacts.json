{
  "contracts": {
    "lib/chainlink-brownie-contracts/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "VRFConsumerBaseV2": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "have",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "want",
                "type": "address"
              }
            ],
            "name": "OnlyCoordinatorCanFulfill",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "requestId",
                "type": "uint256"
              },
              {
                "internalType": "uint256[]",
                "name": "randomWords",
                "type": "uint256[]"
              }
            ],
            "name": "rawFulfillRandomWords",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://038eef992d813c20737fbe94e3a36e5d541d1aa736158dd2a43dd5b840b8c360\",\"dweb:/ipfs/QmZWJ25Yr1sUSAsfJRKvTMDmGkmy63hHhB495CUL1bpNz4\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "rawFulfillRandomWords(uint256,uint256[])": "1fe543e3"
          }
        },
        "irOptimized": ""
      }
    },
    "lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "VRFCoordinatorV2Interface": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "subId",
                "type": "uint64"
              }
            ],
            "name": "acceptSubscriptionOwnerTransfer",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "subId",
                "type": "uint64"
              },
              {
                "internalType": "address",
                "name": "consumer",
                "type": "address"
              }
            ],
            "name": "addConsumer",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "subId",
                "type": "uint64"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              }
            ],
            "name": "cancelSubscription",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "createSubscription",
            "outputs": [
              {
                "internalType": "uint64",
                "name": "subId",
                "type": "uint64"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getRequestConfig",
            "outputs": [
              {
                "internalType": "uint16",
                "name": "",
                "type": "uint16"
              },
              {
                "internalType": "uint32",
                "name": "",
                "type": "uint32"
              },
              {
                "internalType": "bytes32[]",
                "name": "",
                "type": "bytes32[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "subId",
                "type": "uint64"
              }
            ],
            "name": "getSubscription",
            "outputs": [
              {
                "internalType": "uint96",
                "name": "balance",
                "type": "uint96"
              },
              {
                "internalType": "uint64",
                "name": "reqCount",
                "type": "uint64"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address[]",
                "name": "consumers",
                "type": "address[]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "subId",
                "type": "uint64"
              }
            ],
            "name": "pendingRequestExists",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "subId",
                "type": "uint64"
              },
              {
                "internalType": "address",
                "name": "consumer",
                "type": "address"
              }
            ],
            "name": "removeConsumer",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "keyHash",
                "type": "bytes32"
              },
              {
                "internalType": "uint64",
                "name": "subId",
                "type": "uint64"
              },
              {
                "internalType": "uint16",
                "name": "minimumRequestConfirmations",
                "type": "uint16"
              },
              {
                "internalType": "uint32",
                "name": "callbackGasLimit",
                "type": "uint32"
              },
              {
                "internalType": "uint32",
                "name": "numWords",
                "type": "uint32"
              }
            ],
            "name": "requestRandomWords",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "requestId",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint64",
                "name": "subId",
                "type": "uint64"
              },
              {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "requestSubscriptionOwnerTransfer",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d66b2096987616cda4611c109d9904863872ca5852d736b30f0e19e49afde35f\",\"dweb:/ipfs/Qmc6jpm3k3YuJG7U2s3FWr81Vk2rdQBhdqD9sA6b8Cr9BE\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "acceptSubscriptionOwnerTransfer(uint64)": "82359740",
            "addConsumer(uint64,address)": "7341c10c",
            "cancelSubscription(uint64,address)": "d7ae1d30",
            "createSubscription()": "a21a23e4",
            "getRequestConfig()": "00012291",
            "getSubscription(uint64)": "a47c7696",
            "pendingRequestExists(uint64)": "e82ad7d4",
            "removeConsumer(uint64,address)": "9f87fad7",
            "requestRandomWords(bytes32,uint64,uint16,uint32,uint32)": "5d3b1d30",
            "requestSubscriptionOwnerTransfer(uint64,address)": "04c357cb"
          }
        },
        "irOptimized": ""
      }
    },
    "src/Raffle.sol": {
      "Raffle": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "entranceFee",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "interval",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "vrfCoordinator",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "keyHash",
                "type": "bytes32"
              },
              {
                "internalType": "uint64",
                "name": "subscriptionId",
                "type": "uint64"
              },
              {
                "internalType": "uint32",
                "name": "callbackGasLimit",
                "type": "uint32"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "have",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "want",
                "type": "address"
              }
            ],
            "name": "OnlyCoordinatorCanFulfill",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "Raffle__NotEnoughETH",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "Raffle__NotYetTime",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "Raffle__RaffleNotOpen",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "Raffle__TransferFailed",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "currentBalance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "numPlayers",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "RrffleState",
                "type": "uint256"
              }
            ],
            "name": "Raffle__UpkeepNotNeeded",
            "type": "error"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "player",
                "type": "address"
              }
            ],
            "name": "enteredRaffle",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "winner",
                "type": "address"
              }
            ],
            "name": "winnerPicked",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "bytes",
                "name": "",
                "type": "bytes"
              }
            ],
            "name": "checkUpkeep",
            "outputs": [
              {
                "internalType": "bool",
                "name": "upkeepNeeded",
                "type": "bool"
              },
              {
                "internalType": "bytes",
                "name": "",
                "type": "bytes"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "enterRaffle",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getEntranceFee",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getRaffleState",
            "outputs": [
              {
                "internalType": "enum Raffle.RaffleState",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "bytes",
                "name": "",
                "type": "bytes"
              }
            ],
            "name": "performUpkeep",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "requestId",
                "type": "uint256"
              },
              {
                "internalType": "uint256[]",
                "name": "randomWords",
                "type": "uint256[]"
              }
            ],
            "name": "rawFulfillRandomWords",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotYetTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RrffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"enteredRaffle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Automation nodes call to see if it's time to perform an upkeep. The following should be true for this to return true: 1. The time interval has passed between raffle runs 2. The raffle is in the OPEN state 3. The contract has ETH (aka, players) 4. (Implicit) The subscription is funded with LINK\"}},\"version\":1},\"userdoc\":{\"events\":{\"enteredRaffle(address)\":{\"notice\":\"Events \"}},\"kind\":\"user\",\"methods\":{\"getEntranceFee()\":{\"notice\":\"Getter Functions \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://038eef992d813c20737fbe94e3a36e5d541d1aa736158dd2a43dd5b840b8c360\",\"dweb:/ipfs/QmZWJ25Yr1sUSAsfJRKvTMDmGkmy63hHhB495CUL1bpNz4\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d66b2096987616cda4611c109d9904863872ca5852d736b30f0e19e49afde35f\",\"dweb:/ipfs/Qmc6jpm3k3YuJG7U2s3FWr81Vk2rdQBhdqD9sA6b8Cr9BE\"]},\"src/Raffle.sol\":{\"keccak256\":\"0x13e9b739e1843c86261b56c51152dae3a578ce3372c0bb4f4472fe82bb3b28bd\",\"license\":\"SEE LICENSE IN LICENSE\",\"urls\":[\"bzz-raw://c6cede575c3dbd1bdf255a4cae0d5b04fa88aebfd3cc433da9728d597121c8c2\",\"dweb:/ipfs/Qmd6fD4HgM3C3kuvwGctEj4zGAWMTd1PVf3RimEbJCttet\"]}},\"version\":1}",
          "solc_version": "0.8.24",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"Raffle.sol:Raffle\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[15]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r5\n\tst.1\t64, r5\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_7[0], r2, r4\n\tjump.gt\t@.BB0_17\n\tsub.s!\t@CPI0_11[0], r2, r4\n\tjump.eq\t@.BB0_20\n\tsub.s!\t@CPI0_12[0], r2, r4\n\tjump.eq\t@.BB0_22\n\tsub.s!\t@CPI0_13[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tsub!\tr4, r3, r4\n\tjump.ge\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r4\n\tld\tr4, r5\n\tsub.s!\t@CPI0_36[0], r5, r4\n\tjump.ge\t@.BB0_32\n\tshl.s\t5, r5, r4\n\tadd\t63, r4, r6\n\tand\t@CPI0_37[0], r6, r6\n\tsub.s!\t@CPI0_14[0], r6, r7\n\tjump.gt\t@.BB0_32\n\tadd\t128, r6, r6\n\tst.1\t64, r6\n\tst.1\t128, r5\n\tadd\t36, r2, r2\n\tadd\tr4, r2, r4\n\tsub!\tr4, r3, r3\n\tjump.gt\t@.BB0_2\n\tsub!\tr5, r0, r3\n\tjump.eq\t@.BB0_38\n\tadd\t160, r0, r3\n.BB0_37:\n\tptr.add\tr1, r2, r5\n\tld\tr5, r5\n\tst.1.inc\tr3, r5, r3\n\tadd\t32, r2, r2\n\tsub!\tr2, r4, r5\n\tjump.lt\t@.BB0_37\n.BB0_38:\n\tadd\t@CPI0_16[0], r0, r1\n\tst.2\t0, r1\n\tcontext.code_source\tr1\n\tst.2\t4, r1\n\tst.2\t36, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_17[0], r1, r1\n\tadd\t32773, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tand\t@CPI0_2[0], r1, r2\n\tcontext.caller\tr1\n\tsub!\tr1, r2, r3\n\tjump.ne\t@.BB0_41\n\tld.1\t128, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_44\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_28[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_1:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t31, r3, r2\n\tand\t@CPI0_1[0], r2, r2\n\tadd\t352, r2, r2\n\tst.1\t64, r2\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_149\n\tadd\tr0, r0, r5\n.BB0_5:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t352, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_5\n.BB0_149:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_7\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r2, r2\n\tadd\t352, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_7:\n\tsub.s!\t192, r3, r1\n\tjump.lt\t@.BB0_2\n\tld.1\t384, r4\n\tld.1\t352, r6\n\tld.1\t416, r3\n\tsub.s!\t@CPI0_2[0], r3, r1\n\tjump.gt\t@.BB0_2\n\tld.1\t448, r2\n\tld.1\t480, r5\n\tsub.s!\t@CPI0_3[0], r5, r1\n\tjump.gt\t@.BB0_2\n\tld.1\t512, r7\n\tsub.s!\t@CPI0_0[0], r7, r1\n\tjump.gt\t@.BB0_2\n\tst.1\t128, r3\n\tst.1\t160, r6\n\tst.1\t192, r4\n\tst.1\t224, r3\n\tst.1\t320, r2\n\tst.1\t256, r5\n\tst.1\t288, r7\n\tadd\t32779, r0, r1\n\tadd\tr3, r0, stack-[7]\n\tadd\t4, r0, r3\n\tadd\tr4, r0, stack-[8]\n\tcontext.sp\tr4\n\tsub.s\t15, r4, r4\n\tshl.s\t5, r4, r4\n\tadd\tr2, r0, stack-[11]\n\tadd\t@CPI0_4[0], r0, r2\n\tadd\tr5, r0, stack-[9]\n\tadd\tr6, r0, stack-[6]\n\tadd\tr7, r0, stack-[10]\n\tnear_call\tr0, @__system_request, @DEFAULT_UNWIND\n\tsstore\tr0, r1\n\tadd\t2, r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_5[0], r2, r2\n\tsstore\tr1, r2\n\tst.2\t320, r0\n\tadd\tstack-[7], r0, r3\n\tst.2\t352, r3\n\tadd\t32, r0, r1\n\tst.2\t384, r1\n\tadd\tstack-[6], r0, r2\n\tst.2\t416, r2\n\tadd\t64, r0, r2\n\tst.2\t448, r2\n\tadd\tstack-[8], r0, r2\n\tst.2\t480, r2\n\tadd\t96, r0, r2\n\tst.2\t512, r2\n\tst.2\t544, r3\n\tadd\t128, r0, r2\n\tst.2\t576, r2\n\tadd\tstack-[9], r0, r2\n\tst.2\t608, r2\n\tadd\t160, r0, r2\n\tst.2\t640, r2\n\tadd\tstack-[10], r0, r2\n\tst.2\t672, r2\n\tadd\t192, r0, r2\n\tst.2\t704, r2\n\tadd\tstack-[11], r0, r2\n\tst.2\t736, r2\n\tst.2\t256, r1\n\tadd\t7, r0, r1\n\tst.2\t288, r1\n\tadd\t@CPI0_6[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_17:\n\tsub.s!\t@CPI0_8[0], r2, r4\n\tjump.eq\t@.BB0_71\n\tsub.s!\t@CPI0_9[0], r2, r4\n\tjump.eq\t@.BB0_79\n\tsub.s!\t@CPI0_10[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_3[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r2\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB0_2\n\tadd\t4, r4, r5\n\tptr.add\tr1, r5, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_3[0], r2, r6\n\tjump.gt\t@.BB0_32\n\tadd\t31, r2, r6\n\tsub.s\t32, r0, r8\n\tand\tr6, r8, r6\n\tadd\t63, r6, r6\n\tand\tr6, r8, r6\n\tsub.s!\t@CPI0_14[0], r6, r7\n\tjump.gt\t@.BB0_32\n\tadd\t128, r6, r6\n\tst.1\t64, r6\n\tst.1\t128, r2\n\tadd\tr4, r2, r4\n\tadd\t36, r4, r4\n\tsub!\tr4, r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r5, r3\n\tptr.add\tr1, r3, r1\n\tand\t31, r2, r3\n\tshr.s!\t5, r2, r4\n\tjump.eq\t@.BB0_148\n\tadd\tr0, r0, r5\n.BB0_128:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t160, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_128\n.BB0_148:\n\tadd\tr8, r0, stack-[10]\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_130\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r3, r3\n\tadd\t160, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r3, r5\n\tshr\tr5, r3, r5\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_130:\n\tadd\t160, r2, r1\n\tst.1\tr1, r0\n\tsload\tr0, r1\n\tadd\tr1, r0, stack-[11]\n\tadd\t@CPI0_4[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[9]\n\tadd\t@CPI0_4[0], r0, r1\n\tst.2\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tadd\tstack-[9], r0, r3\n\tsub.s\tstack-[11], r3, r2\n\tld\tr1, r1\n\tsub!\tr2, r1, r1\n\tjump.gt\t@.BB0_88\n\tadd\tr2, r0, stack-[11]\n\tadd\t@CPI0_16[0], r0, r1\n\tst.2\t0, r1\n\tcontext.code_source\tr1\n\tst.2\t4, r1\n\tadd\t64, r0, r1\n\tadd\tr1, r0, stack-[9]\n\tst.2\t36, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_17[0], r1, r1\n\tadd\t32773, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[8]\n\tadd\t2, r0, r1\n\tsload\tr1, r1\n\tshr.s\t160, r1, r1\n\tand\t255, r1, r1\n\tadd\tr1, r0, stack-[7]\n\tsub.s!\t1, r1, r1\n\tjump.gt\t@.BB0_24\n\tadd\t@CPI0_18[0], r0, r1\n\tst.2\t0, r1\n\tcontext.this\tr1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_19[0], r1, r1\n\tadd\t32778, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tadd\tstack-[8], r0, r3\n\tsub!\tstack-[11], r3, r2\n\tjump.lt\t@.BB0_137\n\tsub!\tstack-[7], r0, r2\n\tadd\tr0, r0, r3\n\tjump.ne\t@.BB0_140\n\tadd\t1, r0, r2\n\tsload\tr2, r2\n\tsub!\tr2, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tand\tr1, r2, r3\n\tjump\t@.BB0_140\n.BB0_20:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tcontext.code_source\tr1\n\tadd\tr1, r0, stack-[14]\n\tadd\t32, r0, stack-[13]\n\tadd\t32773, r0, r1\n\tadd\t68, r0, r3\n\tcontext.sp\tr4\n\tsub.s\t14, r4, r4\n\tshl.s\t5, r4, r4\n\tadd\t@CPI0_16[0], r0, r2\n\tnear_call\tr0, @__system_request, @DEFAULT_UNWIND\n\tst.1\t128, r1\n\tadd\t@CPI0_45[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_22:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t2, r0, r1\n\tsload\tr1, r1\n\tshr.s\t160, r1, r1\n\tand\t255, r1, r1\n\tsub.s!\t2, r1, r2\n\tjump.ge\t@.BB0_24\n\tst.1\t128, r1\n\tadd\t@CPI0_45[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_71:\n\tadd\t@CPI0_16[0], r0, r1\n\tst.2\t0, r1\n\tcontext.code_source\tr1\n\tst.2\t4, r1\n\tadd\t32, r0, r1\n\tst.2\t36, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_17[0], r1, r1\n\tadd\t32773, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r1, r1\n\tjump.ge\t@.BB0_74\n\tld.1\t64, r1\n\tadd\t@CPI0_35[0], r0, r2\n\tjump\t@.BB0_69\n.BB0_79:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tsub!\tr4, r3, r4\n\tjump.ge\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_3[0], r1, r4\n\tjump.gt\t@.BB0_2\n\tadd\tr2, r1, r1\n\tadd\t36, r1, r1\n\tsub!\tr1, r3, r1\n\tjump.gt\t@.BB0_2\n\tadd\tr5, r0, stack-[10]\n\tadd\t160, r0, r1\n\tadd\tr1, r0, stack-[9]\n\tst.1\t64, r1\n\tst.1\t128, r0\n\tsload\tr0, r1\n\tadd\tr1, r0, stack-[11]\n\tadd\t@CPI0_4[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[8]\n\tadd\t@CPI0_4[0], r0, r1\n\tst.2\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tadd\tstack-[8], r0, r3\n\tsub.s\tstack-[11], r3, r2\n\tld\tr1, r1\n\tsub!\tr2, r1, r1\n\tjump.le\t@.BB0_89\n.BB0_88:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_28[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_74:\n\tadd\t2, r0, r1\n\tsload\tr1, r1\n\tshr.s\t160, r1, r1\n\tand\t255, r1, r1\n\tsub.s!\t1, r1, r2\n\tjump.le\t@.BB0_75\n.BB0_24:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\t33, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_28[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_75:\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_76\n\tadd\t1, r0, r2\n\tsload\tr2, r1\n\tsub.s!\t@CPI0_3[0], r1, r3\n\tjump.le\t@.BB0_78\n.BB0_32:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_28[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_76:\n\tld.1\t64, r1\n\tadd\t@CPI0_29[0], r0, r2\n.BB0_69:\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_30[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_78:\n\tadd\t1, r1, r3\n\tsstore\tr2, r3\n\tst.1\t0, r2\n\tadd\t@CPI0_31[0], r1, r1\n\tsload\tr1, r2\n\tand\t@CPI0_32[0], r2, r2\n\tcontext.caller\tr5\n\tor\tr2, r5, r2\n\tsstore\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t2, r0, r3\n\tadd\t@CPI0_34[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n.BB0_70:\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_41:\n\tld.1\t64, r3\n\tadd\t36, r3, r4\n\tst.1\tr4, r2\n\tadd\t@CPI0_38[0], r0, r2\n\tst.1\tr3, r2\n\tadd\t4, r3, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r1\n\tor\t@CPI0_39[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_89:\n\tadd\tr2, r0, stack-[11]\n\tadd\t@CPI0_16[0], r0, r1\n\tst.2\t0, r1\n\tcontext.code_source\tr1\n\tadd\tr1, r0, stack-[8]\n\tst.2\t4, r1\n\tadd\t64, r0, r1\n\tst.2\t36, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_17[0], r1, r1\n\tadd\t32773, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\t2, r0, r1\n\tadd\tr1, r0, stack-[5]\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tshr.s\t160, r1, r1\n\tand\t255, r1, r1\n\tadd\tr1, r0, stack-[6]\n\tsub.s!\t1, r1, r1\n\tjump.gt\t@.BB0_24\n\tadd\t@CPI0_18[0], r0, r1\n\tst.2\t0, r1\n\tcontext.this\tr1\n\tadd\tr1, r0, stack-[3]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_19[0], r1, r1\n\tadd\t32778, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tadd\t1, r0, r2\n\tadd\tr2, r0, stack-[1]\n\tsload\tr2, r2\n\tadd\tr2, r0, stack-[2]\n\tadd\tstack-[7], r0, r3\n\tsub!\tstack-[11], r3, r2\n\tjump.lt\t@.BB0_93\n\tsub!\tstack-[6], r0, r2\n\tadd\tr0, r0, r2\n\tjump.ne\t@.BB0_97\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\tr0, r0, r2\n\tjump.eq\t@.BB0_97\n\tsub!\tstack-[2], r0, r1\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tjump\t@.BB0_97\n.BB0_44:\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[11]\n\tsload\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_46\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\t18, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_28[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_46:\n\tld.1\t160, r2\n\tdiv\tr2, r1, r2, r3\n\tadd\t@CPI0_31[0], r3, r2\n\tsload\tr2, r2\n\tand\t@CPI0_2[0], r2, stack-[10]\n\tadd\t2, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_40[0], r3, r3\n\tor\tstack-[10], r3, r3\n\tsstore\tr2, r3\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_41[0], r2, r3\n\tjump.gt\t@.BB0_32\n\tadd\t32, r2, r3\n\tst.1\t64, r3\n\tst.1\tr2, r0\n\tadd\tstack-[11], r0, r2\n\tsstore\tr2, r0\n\tadd\t@CPI0_31[0], r1, r1\n\tsub.s!\t@CPI0_42[0], r1, r2\n\tjump.lt\t@.BB0_50\n\tadd\t@CPI0_31[0], r0, r2\n.BB0_49:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_49\n.BB0_50:\n\tadd\tstack-[11], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_4[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tsstore\tr0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t2, r0, r3\n\tadd\t@CPI0_43[0], r0, r4\n\tadd\tstack-[10], r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t@CPI0_18[0], r0, r1\n\tst.2\t0, r1\n\tcontext.this\tr1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_19[0], r1, r1\n\tadd\t32778, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r3\n\tcontext.gas_left\tr1\n\tadd\tstack-[10], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.ne\t@.BB0_54\n\tadd\tstack[@returndatasize], r0, r1\n\tjump\t@.BB0_56\n.BB0_93:\n\tadd\tr0, r0, r2\n.BB0_97:\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_20[0], r1, r3\n\tjump.gt\t@.BB0_32\n\tadd\t64, r1, r3\n\tst.1\t64, r3\n\tadd\t32, r1, r3\n\tadd\t@CPI0_21[0], r0, r4\n\tst.1\tr3, r4\n\tadd\t3, r0, r3\n\tadd\tr3, r0, stack-[11]\n\tst.1\tr1, r3\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_99\n\tadd\tstack-[4], r0, r1\n\tand\t@CPI0_5[0], r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\tstack-[5], r0, r2\n\tsstore\tr2, r1\n\tadd\t@CPI0_25[0], r0, r1\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[7]\n\tst.1\tr2, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tst.2\t0, r1\n\tadd\tstack-[8], r0, r1\n\tst.2\t4, r1\n\tadd\t192, r0, r1\n\tst.2\t36, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_17[0], r1, r1\n\tadd\t32773, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tadd\tstack-[7], r0, r2\n\tadd\t4, r2, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tst.2\t0, r1\n\tadd\tstack-[8], r0, r1\n\tst.2\t4, r1\n\tadd\tstack-[10], r0, r1\n\tst.2\t36, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_17[0], r1, r1\n\tadd\t32773, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tadd\tstack-[7], r0, r3\n\tadd\t68, r3, r2\n\tadd\tstack-[11], r0, r4\n\tst.1\tr2, r4\n\tadd\t36, r3, r2\n\tand\t@CPI0_3[0], r1, r1\n\tst.1\tr2, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tst.2\t0, r1\n\tadd\tstack-[8], r0, r1\n\tst.2\t4, r1\n\tadd\tstack-[9], r0, r1\n\tst.2\t36, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_17[0], r1, r1\n\tadd\t32773, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tadd\tstack-[7], r0, r3\n\tadd\t132, r3, r2\n\tadd\tstack-[1], r0, r4\n\tst.1\tr2, r4\n\tadd\t100, r3, r2\n\tand\t@CPI0_0[0], r1, r1\n\tst.1\tr2, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tst.2\t0, r1\n\tadd\tstack-[8], r0, r1\n\tst.2\t4, r1\n\tadd\t96, r0, r1\n\tst.2\t36, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_17[0], r1, r1\n\tadd\t32773, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r2\n\tcontext.gas_left\tr1\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_106\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_116\n.BB0_39:\n\trevert\n.BB0_99:\n\tadd\tstack-[3], r0, stack-[12]\n\tadd\t32778, r0, r1\n\tadd\t36, r0, r3\n\tcontext.sp\tr4\n\tsub.s\t12, r4, r4\n\tshl.s\t5, r4, r4\n\tadd\t@CPI0_18[0], r0, r2\n\tnear_call\tr0, @__system_request, @DEFAULT_UNWIND\n\tadd\t@CPI0_22[0], r0, r2\n\tld.1\t64, r3\n\tst.1\tr3, r2\n\tadd\t4, r3, r2\n\tst.1\tr2, r1\n\tadd\t36, r3, r1\n\tadd\tstack-[2], r0, r2\n\tst.1\tr1, r2\n\tadd\t68, r3, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r1\n\tor\t@CPI0_23[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_137:\n\tadd\tr0, r0, r3\n.BB0_140:\n\tld.1\t64, r4\n\tsub.s!\t@CPI0_20[0], r4, r1\n\tjump.gt\t@.BB0_32\n\tadd\t64, r4, r1\n\tst.1\t64, r1\n\tadd\t32, r4, r2\n\tadd\t@CPI0_21[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t3, r0, r1\n\tst.1\tr4, r1\n\tld.1\t64, r1\n\tadd\t32, r1, r5\n\tadd\tstack-[9], r0, r6\n\tst.1\tr5, r6\n\tand\t1, r3, r3\n\tst.1\tr1, r3\n\tld.1\tr4, r3\n\tadd\t64, r1, r4\n\tst.1\tr4, r3\n\tadd\t96, r1, r4\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_144\n\tadd\tr0, r0, r5\n.BB0_143:\n\tadd\tr5, r4, r6\n\tadd\tr5, r2, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_143\n.BB0_144:\n\tadd\t31, r3, r2\n\tand\tstack-[10], r2, r2\n\tadd\tr3, r4, r3\n\tst.1\tr3, r0\n\tadd\t96, r2, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_54:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_59\n\tadd\tstack-[10], r0, r2\n\tjump\t@.BB0_58\n.BB0_59:\n\tor\t@CPI0_33[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\tstack-[10], r0, r4\n\tadd\tr0, r0, r5\n.BB0_58:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr2, r0, stack-[11]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@returndatasize]\n\tand\t@CPI0_0[0], r1, r1\n.BB0_56:\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_61\n.BB0_60:\n\tadd\tstack-[11], r0, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_70\n\tld.1\t64, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tjump\t@.BB0_69\n.BB0_61:\n\tsub.s!\t@CPI0_3[0], r1, r2\n\tjump.gt\t@.BB0_32\n\tadd\t31, r1, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\t63, r2, r2\n\tand\tr2, r3, r2\n\tld.1\t64, r3\n\tadd\tr3, r2, r2\n\tsub!\tr2, r3, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_3[0], r2, r5\n\tjump.gt\t@.BB0_32\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_32\n\tst.1\t64, r2\n\tand\t31, r1, r2\n\tst.1.inc\tr3, r1, r3\n\tptr.add\tstack[@ptr_return_data], r0, r4\n\tshr.s!\t5, r1, r1\n\tjump.eq\t@.BB0_145\n\tadd\tr0, r0, r5\n.BB0_66:\n\tshl.s\t5, r5, r6\n\tadd\tr3, r6, r7\n\tptr.add\tr4, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r1, r6\n\tjump.lt\t@.BB0_66\n.BB0_145:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_60\n\tshl.s\t5, r1, r1\n\tptr.add\tr4, r1, r4\n\tadd\tr3, r1, r1\n\tshl.s\t3, r2, r2\n\tld.1\tr1, r3\n\tshl\tr3, r2, r3\n\tshr\tr3, r2, r3\n\tld\tr4, r4\n\tsub\t256, r2, r2\n\tshr\tr4, r2, r4\n\tshl\tr4, r2, r2\n\tor\tr2, r3, r2\n\tst.1\tr1, r2\n\tjump\t@.BB0_60\n.BB0_106:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[7], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_26[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_147\n\tadd\tr0, r0, r7\n.BB0_108:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_108\n.BB0_147:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_110\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[7], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_110:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_111\n.BB0_116:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tstack-[7], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_3[0], r1, r4\n\tjump.gt\t@.BB0_32\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_32\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.ge\t@.BB0_70\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_111:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_146\n\tadd\tr0, r0, r6\n.BB0_113:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_113\n.BB0_146:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_115\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_115:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n__cxa_throw:\n.func_begin1:\n\trevert\n.func_end1:\n\n__system_request:\n.func_begin2:\n\tadd\tr1, r0, r5\n\tst.2\t0, r2\n\tsub.s!\t5, r3, r1\n\tjump.lt\t@.BB2_4\n\tadd\t4, r0, r1\n\tadd\tr0, r0, r2\n.BB2_3:\n\tshl.s\t5, r2, r6\n\tadd\tr4, r6, r6\n\tshr.s\t5, r6, r6\n\tadd\tstack[r6], r0, r6\n\tst.2.inc\tr1, r6, r1\n\tadd\t1, r2, r2\n\tsub!\tr1, r3, r6\n\tjump.lt\t@.BB2_3\n.BB2_4:\n\tadd\t@CPI2_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI2_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI2_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t96, r3, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI2_1[0], r1, r1\n\tadd\tr5, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB2_5\n\tld\tr1, r1\n\tret\n.BB2_5:\n\trevert\n.func_end2:\n\n__farcall:\n.func_begin3:\n.tmp0:\n\tfar_call\tr1, r2, @.BB3_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n__staticcall:\n.func_begin4:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB4_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB4_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end4:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI2_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 8589934560\nCPI0_2:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_3:\n\t.cell 18446744073709551615\nCPI0_4:\n\t.cell 54919857843691310904240101001871775513466943666296306094405906504622902841650\nCPI0_5:\n\t.cell -372682917519380244141939632342652170012262798458881\nCPI0_6:\n\t.cell 53919893334301279589334030174039261387839108057106852292971368284160\nCPI0_7:\n\t.cell 754763064\nCPI0_8:\n\t.cell 754763065\nCPI0_9:\n\t.cell 1166402363\nCPI0_10:\n\t.cell 1845821197\nCPI0_11:\n\t.cell 163328935\nCPI0_12:\n\t.cell 291289845\nCPI0_13:\n\t.cell 535118819\nCPI0_14:\n\t.cell 18446744073709551487\nCPI0_15:\n\t.cell 904625751086426111047927909714404454142933102791518401696464687643217625088\nCPI0_16:\n\t.cell 22182216476136578060272566318850604970565072242024486780356928325126096266030\nCPI0_17:\n\t.cell 904625751086426111047927909714404454142933107862120802609382293630030446592\nCPI0_18:\n\t.cell -44877977326897262784168444354156441158329539312518651612887364914072161059015\nCPI0_19:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_20:\n\t.cell 18446744073709551551\nCPI0_21:\n\t.cell 21923369663594838708531352257499522241609137845663344210927537546801568546816\nCPI0_22:\n\t.cell 39922183179966052174531082078157437462451858761469076835730665244265214377984\nCPI0_23:\n\t.cell 7922816251426433759354395033600\nCPI0_24:\n\t.cell 1461501637330902918203684832716283019655932542976\nCPI0_25:\n\t.cell 42169540339787195743745107202167966427934951583473522896645954012426738335744\nCPI0_26:\n\t.cell 12993418652339351365341207855104\nCPI0_27:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_28:\n\t.cell 2852213850513516153367582212096\nCPI0_29:\n\t.cell -20675374644730195249783241504874701927827957495245689952051934807009303461888\nCPI0_30:\n\t.cell 316912650057057350374175801344\nCPI0_31:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_32:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_33:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_34:\n\t.cell -18291267068730751220140439954063118398531460760450335685570813505954058465169\nCPI0_35:\n\t.cell -46778106972523953375586912764240764738569628340210259039253964273593599655936\nCPI0_36:\n\t.cell 18446744073709551616\nCPI0_37:\n\t.cell 57896044618658097711785492504343953926634992332820282019728792003956564819936\nCPI0_38:\n\t.cell 13105725814401241570152180370873662587423842743608613959111247475329160183808\nCPI0_39:\n\t.cell 5387515050969974956360988622848\nCPI0_40:\n\t.cell -374144419156711147060143317175368453031918731001856\nCPI0_41:\n\t.cell 18446744073709551583\nCPI0_42:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860937\nCPI0_43:\n\t.cell 54859011828664136188795848929341029251310596894669298871546082404750224319441\nCPI0_44:\n\t.cell -42601697258243433635041943435203720516604409490974779454423900113345078886400\nCPI0_45:\n\t.cell 2535301202817642044428229017600\nCPI2_1:\n\t.cell 904625751086426111047927909714404454142933102474605751639407337269041823744\n",
          "bytecode": {
            "object": ""
          },
          "methodIdentifiers": {
            "checkUpkeep(bytes)": "6e04ff0d",
            "enterRaffle()": "2cfcc539",
            "getEntranceFee()": "09bc33a7",
            "getRaffleState()": "115cbaf5",
            "performUpkeep(bytes)": "4585e33b",
            "rawFulfillRandomWords(uint256,uint256[])": "1fe543e3"
          }
        },
        "irOptimized": "/// @use-src 0:\"lib/chainlink-brownie-contracts/contracts/src/v0.8/VRFConsumerBaseV2.sol\", 2:\"src/Raffle.sol\"\nobject \"Raffle_506\" {\n    code {\n        {\n            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n            let _1 := memoryguard(0x0160)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"Raffle_506\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            let _2 := sub(shl(64, 1), 1)\n            if or(gt(newFreePtr, _2), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 192)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n            let value := mload(_1)\n            let value_1 := mload(add(_1, 32))\n            let value_2 := mload(add(_1, 64))\n            let _3 := and(value_2, sub(shl(160, 1), 1))\n            if iszero(eq(value_2, _3))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n            let value_3 := mload(add(_1, 96))\n            let value_4 := mload(add(_1, 128))\n            if iszero(eq(value_4, and(value_4, _2)))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n            let value_5 := mload(add(_1, 160))\n            if iszero(eq(value_5, and(value_5, 0xffffffff)))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:5599:5631  \"vrfCoordinator = _vrfCoordinator\"\n            mstore(/** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 128, /** @src 0:5599:5631  \"vrfCoordinator = _vrfCoordinator\" */ value_2)\n            /// @src 2:2331:2358  \"i_entranceFee = entranceFee\"\n            mstore(/** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 160, /** @src 2:2331:2358  \"i_entranceFee = entranceFee\" */ value)\n            /// @src 2:2368:2389  \"i_interval = interval\"\n            mstore(/** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 192, /** @src 2:2368:2389  \"i_interval = interval\" */ value_1)\n            /// @src 2:2399:2459  \"i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator)\"\n            mstore(224, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _3)\n            /// @src 2:2469:2488  \"i_keyHash = keyHash\"\n            let _4 := 320\n            mstore(_4, value_3)\n            /// @src 2:2498:2531  \"i_subscriptionId = subscriptionId\"\n            let _5 := 256\n            mstore(_5, value_4)\n            /// @src 2:2541:2578  \"i_callbackGasLimit = callbackGasLimit\"\n            let _6 := 288\n            mstore(_6, value_5)\n            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n            sstore(/** @src -1:-1:-1 */ 0, /** @src 2:2607:2622  \"block.timestamp\" */ timestamp())\n            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n            sstore(/** @src 2:2632:2664  \"s_raffleState = RaffleState.OPEN\" */ 0x02, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ and(sload(/** @src 2:2632:2664  \"s_raffleState = RaffleState.OPEN\" */ 0x02), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ not(shl(160, 255))))\n            let _7 := mload(64)\n            let _8 := datasize(\"Raffle_506_deployed\")\n            codecopy(_7, dataoffset(\"Raffle_506_deployed\"), _8)\n            setimmutable(_7, \"10\", mload(128))\n            setimmutable(_7, \"189\", mload(160))\n            setimmutable(_7, \"191\", mload(192))\n            setimmutable(_7, \"194\", mload(/** @src 2:2399:2459  \"i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator)\" */ 224))\n            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n            setimmutable(_7, \"198\", mload(/** @src 2:2498:2531  \"i_subscriptionId = subscriptionId\" */ _5))\n            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n            setimmutable(_7, \"200\", mload(/** @src 2:2541:2578  \"i_callbackGasLimit = callbackGasLimit\" */ _6))\n            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n            setimmutable(_7, \"202\", mload(/** @src 2:2469:2488  \"i_keyHash = keyHash\" */ _4))\n            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n            return(_7, _8)\n        }\n    }\n    /// @use-src 0:\"lib/chainlink-brownie-contracts/contracts/src/v0.8/VRFConsumerBaseV2.sol\", 2:\"src/Raffle.sol\"\n    object \"Raffle_506_deployed\" {\n        code {\n            {\n                /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x09bc33a7 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(_1, /** @src 2:5886:5899  \"i_entranceFee\" */ loadimmutable(\"189\"))\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        return(_1, 32)\n                    }\n                    case 0x115cbaf5 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value := and(shr(160, sload(/** @src 2:5991:6004  \"s_raffleState\" */ 0x02)), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 0xff)\n                        let memPos := mload(_2)\n                        if iszero(lt(value, /** @src 2:5991:6004  \"s_raffleState\" */ 0x02))\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x21)\n                            revert(0, 0x24)\n                        }\n                        mstore(memPos, value)\n                        return(memPos, 32)\n                    }\n                    case 0x1fe543e3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(0, 0) }\n                        let _4 := 36\n                        let offset := calldataload(_4)\n                        let _5 := 0xffffffffffffffff\n                        if gt(offset, _5) { revert(0, 0) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(0, 0) }\n                        let _6 := calldataload(add(_3, offset))\n                        if gt(_6, _5)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(0, _4)\n                        }\n                        let _7 := shl(5, _6)\n                        let _8 := 0x20\n                        let memPtr := mload(_2)\n                        finalize_allocation(memPtr, add(_7, 0x20))\n                        let dst := memPtr\n                        mstore(memPtr, _6)\n                        dst := add(memPtr, 0x20)\n                        let dst_1 := dst\n                        let srcEnd := add(add(offset, _7), _4)\n                        if gt(srcEnd, calldatasize()) { revert(0, 0) }\n                        let src := add(offset, _4)\n                        for { } lt(src, srcEnd) { src := add(src, _8) }\n                        {\n                            mstore(dst, calldataload(src))\n                            dst := add(dst, _8)\n                        }\n                        let _9 := sub(shl(160, 1), 1)\n                        let _10 := and(/** @src 0:6731:6745  \"vrfCoordinator\" */ loadimmutable(\"10\"), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _9)\n                        /// @src 0:6713:6822  \"if (msg.sender != vrfCoordinator) {...\"\n                        if /** @src 0:6717:6745  \"msg.sender != vrfCoordinator\" */ iszero(eq(/** @src 0:6717:6727  \"msg.sender\" */ caller(), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _10))\n                        /// @src 0:6713:6822  \"if (msg.sender != vrfCoordinator) {...\"\n                        {\n                            /// @src 0:6762:6815  \"OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator)\"\n                            let _11 := /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ mload(_2)\n                            /// @src 0:6762:6815  \"OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator)\"\n                            mstore(_11, shl(226, 0x073e64fd))\n                            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                            mstore(/** @src 0:6762:6815  \"OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator)\" */ add(_11, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _3), /** @src 0:6717:6727  \"msg.sender\" */ caller())\n                            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                            mstore(add(/** @src 0:6762:6815  \"OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator)\" */ _11, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _4), _10)\n                            /// @src 0:6762:6815  \"OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator)\"\n                            revert(_11, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 68)\n                        }\n                        if iszero(mload(memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x32)\n                            revert(0, _4)\n                        }\n                        let _12 := mload(dst_1)\n                        let _13 := 1\n                        let _14 := sload(1)\n                        if iszero(_14)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x12)\n                            revert(0, _4)\n                        }\n                        /// @src 2:5161:5185  \"s_players[indexOfWinner]\"\n                        let _15, _16 := storage_array_index_access_address_payable_dyn_ptr(/** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ mod(_12, _14))\n                        let value_1 := and(shr(shl(3, _16), sload(/** @src 2:5161:5185  \"s_players[indexOfWinner]\" */ _15)), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _9)\n                        sstore(/** @src 2:5195:5218  \"s_recentWinner = winner\" */ 0x02, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ or(and(sload(/** @src 2:5195:5218  \"s_recentWinner = winner\" */ 0x02), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ shl(168, 0xffffffffffffffffffffff)), value_1))\n                        let memPtr_1 := mload(_2)\n                        finalize_allocation_9900(memPtr_1)\n                        mstore(memPtr_1, 0)\n                        sstore(1, 0)\n                        let _17 := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                        let _18 := add(_17, _14)\n                        let start := _17\n                        for { } lt(start, _18) { start := add(start, _13) }\n                        { sstore(start, 0) }\n                        mstore(0, 1)\n                        sstore(0, /** @src 2:5430:5445  \"block.timestamp\" */ timestamp())\n                        /// @src 2:5509:5529  \"winnerPicked(winner)\"\n                        log2(/** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 0, 0, /** @src 2:5509:5529  \"winnerPicked(winner)\" */ 0x794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d1, value_1)\n                        /// @src 2:5646:5691  \"winner.call{value: address(this).balance}(\\\"\\\")\"\n                        let expr_component := call(gas(), value_1, /** @src 2:5665:5686  \"address(this).balance\" */ selfbalance(), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 0, 0, 0, 0)\n                        switch returndatasize()\n                        case 0 { }\n                        default {\n                            let _19 := returndatasize()\n                            let _20 := array_allocation_size_bytes(_19)\n                            let memPtr_2 := mload(_2)\n                            finalize_allocation(memPtr_2, _20)\n                            mstore(memPtr_2, _19)\n                            returndatacopy(add(memPtr_2, 0x20), 0, returndatasize())\n                        }\n                        /// @src 2:5701:5771  \"if (!success) {...\"\n                        if /** @src 2:5705:5713  \"!success\" */ iszero(expr_component)\n                        /// @src 2:5701:5771  \"if (!success) {...\"\n                        {\n                            /// @src 2:5736:5760  \"Raffle__TransferFailed()\"\n                            let _21 := /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ mload(_2)\n                            /// @src 2:5736:5760  \"Raffle__TransferFailed()\"\n                            mstore(_21, shl(224, 0xa1d04b39))\n                            revert(_21, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _3)\n                        }\n                        return(0, 0)\n                    }\n                    case 0x2cfcc539 {\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 2:2727:2812  \"if (msg.value < i_entranceFee) {...\"\n                        if /** @src 2:2731:2756  \"msg.value < i_entranceFee\" */ lt(/** @src 2:2731:2740  \"msg.value\" */ callvalue(), /** @src 2:2743:2756  \"i_entranceFee\" */ loadimmutable(\"189\"))\n                        /// @src 2:2727:2812  \"if (msg.value < i_entranceFee) {...\"\n                        {\n                            /// @src 2:2779:2801  \"Raffle__NotEnoughETH()\"\n                            let _22 := /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ mload(_2)\n                            /// @src 2:2779:2801  \"Raffle__NotEnoughETH()\"\n                            mstore(_22, shl(224, 0x9894879b))\n                            revert(_22, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _3)\n                        }\n                        let value_2 := and(shr(160, sload(/** @src 2:2825:2838  \"s_raffleState\" */ 0x02)), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 0xff)\n                        if iszero(lt(value_2, /** @src 2:2825:2838  \"s_raffleState\" */ 0x02))\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x21)\n                            revert(0, 0x24)\n                        }\n                        /// @src 2:2821:2915  \"if (s_raffleState != RaffleState.OPEN) {...\"\n                        if /** @src 2:2825:2858  \"s_raffleState != RaffleState.OPEN\" */ iszero(iszero(value_2))\n                        /// @src 2:2821:2915  \"if (s_raffleState != RaffleState.OPEN) {...\"\n                        {\n                            /// @src 2:2881:2904  \"Raffle__RaffleNotOpen()\"\n                            let _23 := /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ mload(_2)\n                            /// @src 2:2881:2904  \"Raffle__RaffleNotOpen()\"\n                            mstore(_23, shl(226, 0x349289c5))\n                            revert(_23, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _3)\n                        }\n                        let oldLen := sload(1)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(0, 0x24)\n                        }\n                        sstore(1, add(oldLen, 1))\n                        let slot, offset_1 := storage_array_index_access_address_payable_dyn_ptr(oldLen)\n                        let _24 := sload(slot)\n                        let shiftBits := shl(3, offset_1)\n                        sstore(slot, or(and(_24, not(shl(shiftBits, sub(shl(160, 1), 1)))), shl(shiftBits, /** @src 2:2947:2957  \"msg.sender\" */ caller())))\n                        /// @src 2:2974:2999  \"enteredRaffle(msg.sender)\"\n                        log2(/** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 0, 0, /** @src 2:2974:2999  \"enteredRaffle(msg.sender)\" */ 0xd78f827cd914f7521fd97ac8d75e9ab6f080fdcbf7b6cd63e599b59233e6106f, /** @src 2:2947:2957  \"msg.sender\" */ caller())\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        return(0, 0)\n                    }\n                    case 0x4585e33b {\n                        if callvalue() { revert(0, 0) }\n                        let _25 := 32\n                        if slt(add(calldatasize(), not(3)), _25) { revert(0, 0) }\n                        let offset_2 := calldataload(_3)\n                        let _26 := 0xffffffffffffffff\n                        if gt(offset_2, _26) { revert(0, 0) }\n                        if iszero(slt(add(offset_2, 35), calldatasize())) { revert(0, 0) }\n                        let length := calldataload(add(_3, offset_2))\n                        if gt(length, _26) { revert(0, 0) }\n                        if gt(add(add(offset_2, length), 36), calldatasize()) { revert(0, 0) }\n                        let memPtr_3 := mload(_2)\n                        finalize_allocation_9900(memPtr_3)\n                        mstore(memPtr_3, 0)\n                        let diff := sub(/** @src 2:3657:3672  \"block.timestamp\" */ timestamp(), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ sload(0))\n                        if gt(diff, /** @src 2:3657:3672  \"block.timestamp\" */ timestamp())\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(0, 36)\n                        }\n                        /// @src 2:3656:3705  \"(block.timestamp - s_lastTimeStamp) >= i_interval\"\n                        let expr := iszero(lt(diff, /** @src 2:3695:3705  \"i_interval\" */ loadimmutable(\"191\")))\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        let _27 := sload(/** @src 2:3749:3762  \"s_raffleState\" */ 0x02)\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        let value_3 := and(shr(160, _27), 0xff)\n                        if iszero(lt(value_3, /** @src 2:3749:3762  \"s_raffleState\" */ 0x02))\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x21)\n                            revert(0, 36)\n                        }\n                        /// @src 2:3790:3815  \"address(this).balance > 0\"\n                        let expr_1 := iszero(iszero(/** @src 2:3790:3811  \"address(this).balance\" */ selfbalance()))\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        let _28 := sload(1)\n                        /// @src 2:3889:3912  \"timeHasPassed && isOpen\"\n                        let expr_2 := expr\n                        if expr\n                        {\n                            expr_2 := /** @src 2:3729:3762  \"RaffleState.OPEN == s_raffleState\" */ iszero(value_3)\n                        }\n                        /// @src 2:3889:3926  \"timeHasPassed && isOpen && hasBalance\"\n                        let expr_3 := expr_2\n                        if expr_2 { expr_3 := expr_1 }\n                        /// @src 2:3889:3940  \"timeHasPassed && isOpen && hasBalance && hasPlayers\"\n                        let expr_4 := expr_3\n                        if expr_3\n                        {\n                            expr_4 := /** @src 2:3843:3863  \"s_players.length > 0\" */ iszero(iszero(_28))\n                        }\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        let memPtr_4 := mload(_2)\n                        finalize_allocation_9902(memPtr_4)\n                        mstore(memPtr_4, 3)\n                        mstore(add(memPtr_4, _25), \"0x0\")\n                        /// @src 2:4270:4471  \"if (!upkeepNeeded) {...\"\n                        if /** @src 2:4274:4287  \"!upkeepNeeded\" */ iszero(expr_4)\n                        /// @src 2:4270:4471  \"if (!upkeepNeeded) {...\"\n                        {\n                            /// @src 2:4351:4372  \"address(this).balance\"\n                            let expr_5 := selfbalance()\n                            /// @src 2:4310:4460  \"Raffle__UpkeepNotNeeded(...\"\n                            let _29 := /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ mload(_2)\n                            /// @src 2:4310:4460  \"Raffle__UpkeepNotNeeded(...\"\n                            mstore(_29, shl(225, 0x2c2193d5))\n                            /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                            mstore(/** @src 2:4310:4460  \"Raffle__UpkeepNotNeeded(...\" */ add(_29, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _3), expr_5)\n                            mstore(add(/** @src 2:4310:4460  \"Raffle__UpkeepNotNeeded(...\" */ _29, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 36), _28)\n                            mstore(add(/** @src 2:4310:4460  \"Raffle__UpkeepNotNeeded(...\" */ _29, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 68), value_3)\n                            /// @src 2:4310:4460  \"Raffle__UpkeepNotNeeded(...\"\n                            revert(_29, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 100)\n                        }\n                        sstore(/** @src 2:3749:3762  \"s_raffleState\" */ 0x02, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ or(and(_27, not(shl(160, 255))), shl(160, 1)))\n                        /// @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\"\n                        let _30 := /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ mload(_2)\n                        /// @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\"\n                        mstore(_30, /** @src 2:1378:1379  \"1\" */ shl(228, 0x05d3b1d3))\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        mstore(/** @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\" */ add(_30, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _3), /** @src 2:4674:4683  \"i_keyHash\" */ loadimmutable(\"202\"))\n                        /// @src 2:1378:1379  \"1\"\n                        mstore(add(/** @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\" */ _30, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 36), /** @src 2:1378:1379  \"1\" */ and(/** @src 2:4709:4725  \"i_subscriptionId\" */ loadimmutable(\"198\"), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _26))\n                        /// @src 2:1378:1379  \"1\"\n                        mstore(add(/** @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\" */ _30, /** @src 2:1378:1379  \"1\" */ 68), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 3)\n                        /// @src 2:1378:1379  \"1\"\n                        mstore(add(/** @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\" */ _30, /** @src 2:1378:1379  \"1\" */ 100), /** @src 2:1335:1336  \"3\" */ and(/** @src 2:4774:4792  \"i_callbackGasLimit\" */ loadimmutable(\"200\"), /** @src 2:1335:1336  \"3\" */ 0xffffffff))\n                        /// @src 2:1378:1379  \"1\"\n                        mstore(add(/** @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\" */ _30, /** @src 2:1378:1379  \"1\" */ 132), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 1)\n                        /// @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\"\n                        let _31 := call(gas(), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ and(/** @src 2:4625:4641  \"i_vrfCoordinator\" */ loadimmutable(\"194\"), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ sub(shl(160, 1), 1)), 0, /** @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\" */ _30, /** @src 2:1378:1379  \"1\" */ 164, /** @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\" */ _30, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _25)\n                        /// @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\"\n                        if iszero(_31)\n                        {\n                            /// @src 2:1378:1379  \"1\"\n                            let pos := /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ mload(_2)\n                            /// @src 2:1378:1379  \"1\"\n                            returndatacopy(pos, /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 0, /** @src 2:1378:1379  \"1\" */ returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\"\n                        if _31\n                        {\n                            let _32 := /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _25\n                            /// @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\"\n                            if gt(/** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _25, /** @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\" */ returndatasize()) { _32 := returndatasize() }\n                            finalize_allocation(_30, _32)\n                            /// @src 2:1378:1379  \"1\"\n                            if slt(sub(/** @src 2:4625:4825  \"i_vrfCoordinator.requestRandomWords(...\" */ add(_30, _32), /** @src 2:1378:1379  \"1\" */ _30), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ _25)\n                            /// @src 2:1378:1379  \"1\"\n                            {\n                                /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                                revert(0, 0)\n                            }\n                        }\n                        return(0, 0)\n                    }\n                    case 0x6e04ff0d {\n                        if callvalue() { revert(0, 0) }\n                        let _33 := 32\n                        if slt(add(calldatasize(), not(3)), _33) { revert(0, 0) }\n                        let offset_3 := calldataload(_3)\n                        if gt(offset_3, 0xffffffffffffffff) { revert(0, 0) }\n                        if iszero(slt(add(offset_3, 35), calldatasize())) { revert(0, 0) }\n                        let _34 := calldataload(add(_3, offset_3))\n                        let _35 := array_allocation_size_bytes(_34)\n                        let memPtr_5 := mload(_2)\n                        finalize_allocation(memPtr_5, _35)\n                        mstore(memPtr_5, _34)\n                        if gt(add(add(offset_3, _34), 36), calldatasize()) { revert(0, 0) }\n                        calldatacopy(add(memPtr_5, _33), add(offset_3, 36), _34)\n                        mstore(add(add(memPtr_5, _34), _33), 0)\n                        let diff_1 := sub(/** @src 2:3657:3672  \"block.timestamp\" */ timestamp(), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ sload(0))\n                        if gt(diff_1, /** @src 2:3657:3672  \"block.timestamp\" */ timestamp())\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(0, 36)\n                        }\n                        /// @src 2:3656:3705  \"(block.timestamp - s_lastTimeStamp) >= i_interval\"\n                        let expr_6 := iszero(lt(diff_1, /** @src 2:3695:3705  \"i_interval\" */ loadimmutable(\"191\")))\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        let value_4 := and(shr(160, sload(/** @src 2:3749:3762  \"s_raffleState\" */ 0x02)), /** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ 0xff)\n                        if iszero(lt(value_4, /** @src 2:3749:3762  \"s_raffleState\" */ 0x02))\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x21)\n                            revert(0, 36)\n                        }\n                        /// @src 2:3790:3815  \"address(this).balance > 0\"\n                        let expr_7 := iszero(iszero(/** @src 2:3790:3811  \"address(this).balance\" */ selfbalance()))\n                        /// @src 2:3843:3863  \"s_players.length > 0\"\n                        let expr_8 := iszero(iszero(/** @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\" */ sload(1)))\n                        /// @src 2:3889:3912  \"timeHasPassed && isOpen\"\n                        let expr_9 := expr_6\n                        if expr_6\n                        {\n                            expr_9 := /** @src 2:3729:3762  \"RaffleState.OPEN == s_raffleState\" */ iszero(value_4)\n                        }\n                        /// @src 2:3889:3926  \"timeHasPassed && isOpen && hasBalance\"\n                        let expr_10 := expr_9\n                        if expr_9 { expr_10 := expr_7 }\n                        /// @src 2:3889:3940  \"timeHasPassed && isOpen && hasBalance && hasPlayers\"\n                        let expr_11 := expr_10\n                        if expr_10 { expr_11 := expr_8 }\n                        /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                        let memPtr_6 := mload(_2)\n                        finalize_allocation_9902(memPtr_6)\n                        mstore(memPtr_6, 3)\n                        mstore(add(memPtr_6, _33), \"0x0\")\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, iszero(iszero(expr_11)))\n                        mstore(add(memPos_1, _33), _2)\n                        let length_1 := mload(memPtr_6)\n                        mstore(add(memPos_1, _2), length_1)\n                        let i := 0\n                        for { } lt(i, length_1) { i := add(i, _33) }\n                        {\n                            mstore(add(add(memPos_1, i), 96), mload(add(add(memPtr_6, i), _33)))\n                        }\n                        mstore(add(add(memPos_1, length_1), 96), 0)\n                        return(memPos_1, add(sub(add(memPos_1, and(add(length_1, 0x1f), not(31))), memPos_1), 96))\n                    }\n                }\n                revert(0, 0)\n            }\n            function finalize_allocation_9900(memPtr)\n            {\n                let newFreePtr := add(memPtr, 0x20)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation_9902(memPtr)\n            {\n                let newFreePtr := add(memPtr, 64)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function array_allocation_size_bytes(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                size := add(and(add(length, 31), not(31)), 0x20)\n            }\n            function storage_array_index_access_address_payable_dyn_ptr(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 2:5110:5119  \"s_players\" */ 0x01)))\n                /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 2:5110:5119  \"s_players\" */ 0x01)\n                /// @src 2:847:6013  \"contract Raffle is VRFConsumerBaseV2 {...\"\n                slot := add(80084422859880547211683076133703299733277748156566366325829078699459944778998, index)\n                offset := /** @src -1:-1:-1 */ 0\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220f8ddb439ce8979f27e0915d9d88a4e0f560019908a34c31cb431fadafef9d9fc64736f6c63430008180033\"\n    }\n}\n",
        "hash": "010001412282394acb84c3ce605672b533697b69944f6615a926126d640182c0",
        "factoryDependencies": {}
      }
    }
  },
  "sources": {
    "lib/chainlink-brownie-contracts/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "id": 0,
      "ast": {
        "absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/VRFConsumerBaseV2.sol",
        "exportedSymbols": {
          "VRFConsumerBaseV2": [
            57
          ]
        },
        "id": 58,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".4"
            ],
            "nodeType": "PragmaDirective",
            "src": "32:23:0"
          },
          {
            "abstract": true,
            "baseContracts": [],
            "canonicalName": "VRFConsumerBaseV2",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 2,
              "nodeType": "StructuredDocumentation",
              "src": "57:5275:0",
              "text": "****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."
            },
            "fullyImplemented": false,
            "id": 57,
            "linearizedBaseContracts": [
              57
            ],
            "name": "VRFConsumerBaseV2",
            "nameLocation": "5351:17:0",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "errorSelector": "1cf993f4",
                "id": 8,
                "name": "OnlyCoordinatorCanFulfill",
                "nameLocation": "5379:25:0",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 7,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 4,
                      "mutability": "mutable",
                      "name": "have",
                      "nameLocation": "5413:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 8,
                      "src": "5405:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 3,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5405:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 6,
                      "mutability": "mutable",
                      "name": "want",
                      "nameLocation": "5427:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 8,
                      "src": "5419:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 5,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5419:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5404:28:0"
                },
                "src": "5373:60:0"
              },
              {
                "constant": false,
                "id": 10,
                "mutability": "immutable",
                "name": "vrfCoordinator",
                "nameLocation": "5462:14:0",
                "nodeType": "VariableDeclaration",
                "scope": 57,
                "src": "5436:40:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 9,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "5436:7:0",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "private"
              },
              {
                "body": {
                  "id": 20,
                  "nodeType": "Block",
                  "src": "5593:43:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 18,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 16,
                          "name": "vrfCoordinator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "5599:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 17,
                          "name": "_vrfCoordinator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 13,
                          "src": "5616:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "5599:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 19,
                      "nodeType": "ExpressionStatement",
                      "src": "5599:32:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 11,
                  "nodeType": "StructuredDocumentation",
                  "src": "5481:72:0",
                  "text": " @param _vrfCoordinator address of VRFCoordinator contract"
                },
                "id": 21,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 14,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 13,
                      "mutability": "mutable",
                      "name": "_vrfCoordinator",
                      "nameLocation": "5576:15:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 21,
                      "src": "5568:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 12,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5568:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5567:25:0"
                },
                "returnParameters": {
                  "id": 15,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "5593:0:0"
                },
                "scope": 57,
                "src": "5556:80:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "documentation": {
                  "id": 22,
                  "nodeType": "StructuredDocumentation",
                  "src": "5640:686:0",
                  "text": " @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"
                },
                "id": 30,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "fulfillRandomWords",
                "nameLocation": "6338:18:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 28,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 24,
                      "mutability": "mutable",
                      "name": "requestId",
                      "nameLocation": "6365:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 30,
                      "src": "6357:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 23,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6357:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 27,
                      "mutability": "mutable",
                      "name": "randomWords",
                      "nameLocation": "6393:11:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 30,
                      "src": "6376:28:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 25,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6376:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 26,
                        "nodeType": "ArrayTypeName",
                        "src": "6376:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6356:49:0"
                },
                "returnParameters": {
                  "id": 29,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "6422:0:0"
                },
                "scope": 57,
                "src": "6329:94:0",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 55,
                  "nodeType": "Block",
                  "src": "6707:167:0",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 41,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 38,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6717:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 39,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "6721:6:0",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "6717:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "id": 40,
                          "name": "vrfCoordinator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "6731:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6717:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 49,
                      "nodeType": "IfStatement",
                      "src": "6713:109:0",
                      "trueBody": {
                        "id": 48,
                        "nodeType": "Block",
                        "src": "6747:75:0",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 43,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "6788:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 44,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "6792:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "6788:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 45,
                                  "name": "vrfCoordinator",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 10,
                                  "src": "6800:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 42,
                                "name": "OnlyCoordinatorCanFulfill",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8,
                                "src": "6762:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$__$",
                                  "typeString": "function (address,address) pure"
                                }
                              },
                              "id": 46,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6762:53:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 47,
                            "nodeType": "RevertStatement",
                            "src": "6755:60:0"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 51,
                            "name": "requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 32,
                            "src": "6846:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 52,
                            "name": "randomWords",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 35,
                            "src": "6857:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          ],
                          "id": 50,
                          "name": "fulfillRandomWords",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30,
                          "src": "6827:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
                            "typeString": "function (uint256,uint256[] memory)"
                          }
                        },
                        "id": 53,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6827:42:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 54,
                      "nodeType": "ExpressionStatement",
                      "src": "6827:42:0"
                    }
                  ]
                },
                "functionSelector": "1fe543e3",
                "id": 56,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "rawFulfillRandomWords",
                "nameLocation": "6627:21:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 36,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 32,
                      "mutability": "mutable",
                      "name": "requestId",
                      "nameLocation": "6657:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 56,
                      "src": "6649:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 31,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6649:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 35,
                      "mutability": "mutable",
                      "name": "randomWords",
                      "nameLocation": "6685:11:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 56,
                      "src": "6668:28:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 33,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6668:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 34,
                        "nodeType": "ArrayTypeName",
                        "src": "6668:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6648:49:0"
                },
                "returnParameters": {
                  "id": 37,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "6707:0:0"
                },
                "scope": 57,
                "src": "6618:256:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 58,
            "src": "5333:1543:0",
            "usedErrors": [
              8
            ],
            "usedEvents": []
          }
        ],
        "src": "32:6845:0"
      }
    },
    "lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "id": 1,
      "ast": {
        "absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol",
        "exportedSymbols": {
          "VRFCoordinatorV2Interface": [
            153
          ]
        },
        "id": 154,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 59,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "32:23:1"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "VRFCoordinatorV2Interface",
            "contractDependencies": [],
            "contractKind": "interface",
            "fullyImplemented": false,
            "id": 153,
            "linearizedBaseContracts": [
              153
            ],
            "name": "VRFCoordinatorV2Interface",
            "nameLocation": "67:25:1",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "documentation": {
                  "id": 60,
                  "nodeType": "StructuredDocumentation",
                  "src": "97:267:1",
                  "text": " @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"
                },
                "functionSelector": "00012291",
                "id": 70,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "getRequestConfig",
                "nameLocation": "376:16:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 61,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "392:2:1"
                },
                "returnParameters": {
                  "id": 69,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 63,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 70,
                      "src": "418:6:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      },
                      "typeName": {
                        "id": 62,
                        "name": "uint16",
                        "nodeType": "ElementaryTypeName",
                        "src": "418:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 65,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 70,
                      "src": "426:6:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 64,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "426:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 68,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 70,
                      "src": "434:16:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                        "typeString": "bytes32[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 66,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "434:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 67,
                        "nodeType": "ArrayTypeName",
                        "src": "434:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                          "typeString": "bytes32[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "417:34:1"
                },
                "scope": 153,
                "src": "367:85:1",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 71,
                  "nodeType": "StructuredDocumentation",
                  "src": "456:1511:1",
                  "text": " @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."
                },
                "functionSelector": "5d3b1d30",
                "id": 86,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "requestRandomWords",
                "nameLocation": "1979:18:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 82,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 73,
                      "mutability": "mutable",
                      "name": "keyHash",
                      "nameLocation": "2011:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 86,
                      "src": "2003:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 72,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2003:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 75,
                      "mutability": "mutable",
                      "name": "subId",
                      "nameLocation": "2031:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 86,
                      "src": "2024:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 74,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "2024:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 77,
                      "mutability": "mutable",
                      "name": "minimumRequestConfirmations",
                      "nameLocation": "2049:27:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 86,
                      "src": "2042:34:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      },
                      "typeName": {
                        "id": 76,
                        "name": "uint16",
                        "nodeType": "ElementaryTypeName",
                        "src": "2042:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 79,
                      "mutability": "mutable",
                      "name": "callbackGasLimit",
                      "nameLocation": "2089:16:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 86,
                      "src": "2082:23:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 78,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2082:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 81,
                      "mutability": "mutable",
                      "name": "numWords",
                      "nameLocation": "2118:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 86,
                      "src": "2111:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 80,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2111:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1997:133:1"
                },
                "returnParameters": {
                  "id": 85,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 84,
                      "mutability": "mutable",
                      "name": "requestId",
                      "nameLocation": "2157:9:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 86,
                      "src": "2149:17:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 83,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2149:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2148:19:1"
                },
                "scope": 153,
                "src": "1970:198:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 87,
                  "nodeType": "StructuredDocumentation",
                  "src": "2172:384:1",
                  "text": " @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"
                },
                "functionSelector": "a21a23e4",
                "id": 92,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "createSubscription",
                "nameLocation": "2568:18:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 88,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2586:2:1"
                },
                "returnParameters": {
                  "id": 91,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 90,
                      "mutability": "mutable",
                      "name": "subId",
                      "nameLocation": "2614:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 92,
                      "src": "2607:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 89,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "2607:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2606:14:1"
                },
                "scope": 153,
                "src": "2559:62:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 93,
                  "nodeType": "StructuredDocumentation",
                  "src": "2625:381:1",
                  "text": " @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."
                },
                "functionSelector": "a47c7696",
                "id": 107,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "getSubscription",
                "nameLocation": "3018:15:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 96,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 95,
                      "mutability": "mutable",
                      "name": "subId",
                      "nameLocation": "3046:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 107,
                      "src": "3039:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 94,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "3039:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3033:22:1"
                },
                "returnParameters": {
                  "id": 106,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 98,
                      "mutability": "mutable",
                      "name": "balance",
                      "nameLocation": "3086:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 107,
                      "src": "3079:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint96",
                        "typeString": "uint96"
                      },
                      "typeName": {
                        "id": 97,
                        "name": "uint96",
                        "nodeType": "ElementaryTypeName",
                        "src": "3079:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint96",
                          "typeString": "uint96"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 100,
                      "mutability": "mutable",
                      "name": "reqCount",
                      "nameLocation": "3102:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 107,
                      "src": "3095:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 99,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "3095:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 102,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "3120:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 107,
                      "src": "3112:13:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 101,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3112:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 105,
                      "mutability": "mutable",
                      "name": "consumers",
                      "nameLocation": "3144:9:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 107,
                      "src": "3127:26:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 103,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3127:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 104,
                        "nodeType": "ArrayTypeName",
                        "src": "3127:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3078:76:1"
                },
                "scope": 153,
                "src": "3009:146:1",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 108,
                  "nodeType": "StructuredDocumentation",
                  "src": "3159:164:1",
                  "text": " @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"
                },
                "functionSelector": "04c357cb",
                "id": 115,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "requestSubscriptionOwnerTransfer",
                "nameLocation": "3335:32:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 113,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 110,
                      "mutability": "mutable",
                      "name": "subId",
                      "nameLocation": "3375:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 115,
                      "src": "3368:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 109,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "3368:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 112,
                      "mutability": "mutable",
                      "name": "newOwner",
                      "nameLocation": "3390:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 115,
                      "src": "3382:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 111,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3382:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3367:32:1"
                },
                "returnParameters": {
                  "id": 114,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3408:0:1"
                },
                "scope": 153,
                "src": "3326:83:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 116,
                  "nodeType": "StructuredDocumentation",
                  "src": "3413:212:1",
                  "text": " @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."
                },
                "functionSelector": "82359740",
                "id": 121,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "acceptSubscriptionOwnerTransfer",
                "nameLocation": "3637:31:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 119,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 118,
                      "mutability": "mutable",
                      "name": "subId",
                      "nameLocation": "3676:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 121,
                      "src": "3669:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 117,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "3669:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3668:14:1"
                },
                "returnParameters": {
                  "id": 120,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3691:0:1"
                },
                "scope": 153,
                "src": "3628:64:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 122,
                  "nodeType": "StructuredDocumentation",
                  "src": "3696:170:1",
                  "text": " @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"
                },
                "functionSelector": "7341c10c",
                "id": 129,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "addConsumer",
                "nameLocation": "3878:11:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 127,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 124,
                      "mutability": "mutable",
                      "name": "subId",
                      "nameLocation": "3897:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 129,
                      "src": "3890:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 123,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "3890:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 126,
                      "mutability": "mutable",
                      "name": "consumer",
                      "nameLocation": "3912:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 129,
                      "src": "3904:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 125,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3904:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3889:32:1"
                },
                "returnParameters": {
                  "id": 128,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3930:0:1"
                },
                "scope": 153,
                "src": "3869:62:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 130,
                  "nodeType": "StructuredDocumentation",
                  "src": "3935:172:1",
                  "text": " @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"
                },
                "functionSelector": "9f87fad7",
                "id": 137,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "removeConsumer",
                "nameLocation": "4119:14:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 135,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 132,
                      "mutability": "mutable",
                      "name": "subId",
                      "nameLocation": "4141:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 137,
                      "src": "4134:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 131,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "4134:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 134,
                      "mutability": "mutable",
                      "name": "consumer",
                      "nameLocation": "4156:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 137,
                      "src": "4148:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 133,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4148:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4133:32:1"
                },
                "returnParameters": {
                  "id": 136,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "4174:0:1"
                },
                "scope": 153,
                "src": "4110:65:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 138,
                  "nodeType": "StructuredDocumentation",
                  "src": "4179:140:1",
                  "text": " @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"
                },
                "functionSelector": "d7ae1d30",
                "id": 145,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "cancelSubscription",
                "nameLocation": "4331:18:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 143,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 140,
                      "mutability": "mutable",
                      "name": "subId",
                      "nameLocation": "4357:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 145,
                      "src": "4350:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 139,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "4350:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 142,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "4372:2:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 145,
                      "src": "4364:10:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 141,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4364:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4349:26:1"
                },
                "returnParameters": {
                  "id": 144,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "4384:0:1"
                },
                "scope": 153,
                "src": "4322:63:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "functionSelector": "e82ad7d4",
                "id": 152,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "pendingRequestExists",
                "nameLocation": "4690:20:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 148,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 147,
                      "mutability": "mutable",
                      "name": "subId",
                      "nameLocation": "4718:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 152,
                      "src": "4711:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 146,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "4711:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4710:14:1"
                },
                "returnParameters": {
                  "id": 151,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 150,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 152,
                      "src": "4748:4:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 149,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4748:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4747:6:1"
                },
                "scope": 153,
                "src": "4681:73:1",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 154,
            "src": "57:4699:1",
            "usedErrors": [],
            "usedEvents": []
          }
        ],
        "src": "32:4725:1"
      }
    },
    "src/Raffle.sol": {
      "id": 2,
      "ast": {
        "absolutePath": "src/Raffle.sol",
        "exportedSymbols": {
          "Raffle": [
            506
          ],
          "VRFConsumerBaseV2": [
            57
          ],
          "VRFCoordinatorV2Interface": [
            153
          ]
        },
        "id": 507,
        "license": "SEE LICENSE IN LICENSE",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 155,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".18"
            ],
            "nodeType": "PragmaDirective",
            "src": "456:24:2"
          },
          {
            "absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol",
            "file": "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol",
            "id": 157,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 507,
            "sourceUnit": 154,
            "src": "645:113:2",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 156,
                  "name": "VRFCoordinatorV2Interface",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 153,
                  "src": "653:25:2",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/VRFConsumerBaseV2.sol",
            "file": "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol",
            "id": 159,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 507,
            "sourceUnit": 58,
            "src": "759:86:2",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 158,
                  "name": "VRFConsumerBaseV2",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 57,
                  "src": "767:17:2",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "baseName": {
                  "id": 160,
                  "name": "VRFConsumerBaseV2",
                  "nameLocations": [
                    "866:17:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 57,
                  "src": "866:17:2"
                },
                "id": 161,
                "nodeType": "InheritanceSpecifier",
                "src": "866:17:2"
              }
            ],
            "canonicalName": "Raffle",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 506,
            "linearizedBaseContracts": [
              506,
              57
            ],
            "name": "Raffle",
            "nameLocation": "856:6:2",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "errorSelector": "9894879b",
                "id": 163,
                "name": "Raffle__NotEnoughETH",
                "nameLocation": "896:20:2",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 162,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "916:2:2"
                },
                "src": "890:29:2"
              },
              {
                "errorSelector": "4c2b0b70",
                "id": 165,
                "name": "Raffle__NotYetTime",
                "nameLocation": "930:18:2",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 164,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "948:2:2"
                },
                "src": "924:27:2"
              },
              {
                "errorSelector": "a1d04b39",
                "id": 167,
                "name": "Raffle__TransferFailed",
                "nameLocation": "962:22:2",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 166,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "984:2:2"
                },
                "src": "956:31:2"
              },
              {
                "errorSelector": "d24a2714",
                "id": 169,
                "name": "Raffle__RaffleNotOpen",
                "nameLocation": "998:21:2",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 168,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1019:2:2"
                },
                "src": "992:30:2"
              },
              {
                "errorSelector": "584327aa",
                "id": 177,
                "name": "Raffle__UpkeepNotNeeded",
                "nameLocation": "1033:23:2",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 176,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 171,
                      "mutability": "mutable",
                      "name": "currentBalance",
                      "nameLocation": "1074:14:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 177,
                      "src": "1066:22:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 170,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1066:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 173,
                      "mutability": "mutable",
                      "name": "numPlayers",
                      "nameLocation": "1106:10:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 177,
                      "src": "1098:18:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 172,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1098:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 175,
                      "mutability": "mutable",
                      "name": "RrffleState",
                      "nameLocation": "1134:11:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 177,
                      "src": "1126:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 174,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1126:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1056:95:2"
                },
                "src": "1027:125:2"
              },
              {
                "canonicalName": "Raffle.RaffleState",
                "id": 180,
                "members": [
                  {
                    "id": 178,
                    "name": "OPEN",
                    "nameLocation": "1213:4:2",
                    "nodeType": "EnumValue",
                    "src": "1213:4:2"
                  },
                  {
                    "id": 179,
                    "name": "CALCULATING",
                    "nameLocation": "1232:11:2",
                    "nodeType": "EnumValue",
                    "src": "1232:11:2"
                  }
                ],
                "name": "RaffleState",
                "nameLocation": "1191:11:2",
                "nodeType": "EnumDefinition",
                "src": "1186:68:2"
              },
              {
                "constant": true,
                "documentation": {
                  "id": 181,
                  "nodeType": "StructuredDocumentation",
                  "src": "1260:22:2",
                  "text": "State Variables "
                },
                "id": 184,
                "mutability": "constant",
                "name": "REQUEST_CONFIRMATIONS",
                "nameLocation": "1311:21:2",
                "nodeType": "VariableDeclaration",
                "scope": 506,
                "src": "1287:49:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint16",
                  "typeString": "uint16"
                },
                "typeName": {
                  "id": 182,
                  "name": "uint16",
                  "nodeType": "ElementaryTypeName",
                  "src": "1287:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  }
                },
                "value": {
                  "hexValue": "33",
                  "id": 183,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1335:1:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_3_by_1",
                    "typeString": "int_const 3"
                  },
                  "value": "3"
                },
                "visibility": "private"
              },
              {
                "constant": true,
                "id": 187,
                "mutability": "constant",
                "name": "NUM_WORDS",
                "nameLocation": "1366:9:2",
                "nodeType": "VariableDeclaration",
                "scope": 506,
                "src": "1342:37:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint32",
                  "typeString": "uint32"
                },
                "typeName": {
                  "id": 185,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1342:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "value": {
                  "hexValue": "31",
                  "id": 186,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1378:1:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1_by_1",
                    "typeString": "int_const 1"
                  },
                  "value": "1"
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 189,
                "mutability": "immutable",
                "name": "i_entranceFee",
                "nameLocation": "1412:13:2",
                "nodeType": "VariableDeclaration",
                "scope": 506,
                "src": "1386:39:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 188,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1386:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 191,
                "mutability": "immutable",
                "name": "i_interval",
                "nameLocation": "1505:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 506,
                "src": "1479:36:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 190,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1479:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 194,
                "mutability": "immutable",
                "name": "i_vrfCoordinator",
                "nameLocation": "1565:16:2",
                "nodeType": "VariableDeclaration",
                "scope": 506,
                "src": "1521:60:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$153",
                  "typeString": "contract VRFCoordinatorV2Interface"
                },
                "typeName": {
                  "id": 193,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 192,
                    "name": "VRFCoordinatorV2Interface",
                    "nameLocations": [
                      "1521:25:2"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 153,
                    "src": "1521:25:2"
                  },
                  "referencedDeclaration": 153,
                  "src": "1521:25:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$153",
                    "typeString": "contract VRFCoordinatorV2Interface"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 196,
                "mutability": "mutable",
                "name": "s_lastTimeStamp",
                "nameLocation": "1603:15:2",
                "nodeType": "VariableDeclaration",
                "scope": 506,
                "src": "1587:31:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 195,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1587:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 198,
                "mutability": "immutable",
                "name": "i_subscriptionId",
                "nameLocation": "1649:16:2",
                "nodeType": "VariableDeclaration",
                "scope": 506,
                "src": "1624:41:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 197,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "1624:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 200,
                "mutability": "immutable",
                "name": "i_callbackGasLimit",
                "nameLocation": "1696:18:2",
                "nodeType": "VariableDeclaration",
                "scope": 506,
                "src": "1671:43:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint32",
                  "typeString": "uint32"
                },
                "typeName": {
                  "id": 199,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1671:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 202,
                "mutability": "immutable",
                "name": "i_keyHash",
                "nameLocation": "1746:9:2",
                "nodeType": "VariableDeclaration",
                "scope": 506,
                "src": "1720:35:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 201,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1720:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 205,
                "mutability": "mutable",
                "name": "s_players",
                "nameLocation": "1787:9:2",
                "nodeType": "VariableDeclaration",
                "scope": 506,
                "src": "1761:35:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                  "typeString": "address payable[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 203,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1761:15:2",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 204,
                  "nodeType": "ArrayTypeName",
                  "src": "1761:17:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                    "typeString": "address payable[]"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 207,
                "mutability": "mutable",
                "name": "s_recentWinner",
                "nameLocation": "1838:14:2",
                "nodeType": "VariableDeclaration",
                "scope": 506,
                "src": "1822:30:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 206,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1822:7:2",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 210,
                "mutability": "mutable",
                "name": "s_raffleState",
                "nameLocation": "1878:13:2",
                "nodeType": "VariableDeclaration",
                "scope": 506,
                "src": "1858:33:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_RaffleState_$180",
                  "typeString": "enum Raffle.RaffleState"
                },
                "typeName": {
                  "id": 209,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 208,
                    "name": "RaffleState",
                    "nameLocations": [
                      "1858:11:2"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 180,
                    "src": "1858:11:2"
                  },
                  "referencedDeclaration": 180,
                  "src": "1858:11:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_RaffleState_$180",
                    "typeString": "enum Raffle.RaffleState"
                  }
                },
                "visibility": "private"
              },
              {
                "anonymous": false,
                "documentation": {
                  "id": 211,
                  "nodeType": "StructuredDocumentation",
                  "src": "1898:13:2",
                  "text": "Events "
                },
                "eventSelector": "d78f827cd914f7521fd97ac8d75e9ab6f080fdcbf7b6cd63e599b59233e6106f",
                "id": 215,
                "name": "enteredRaffle",
                "nameLocation": "1922:13:2",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 214,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 213,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "player",
                      "nameLocation": "1952:6:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 215,
                      "src": "1936:22:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 212,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1936:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1935:24:2"
                },
                "src": "1916:44:2"
              },
              {
                "anonymous": false,
                "eventSelector": "794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d1",
                "id": 219,
                "name": "winnerPicked",
                "nameLocation": "1971:12:2",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 218,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 217,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "winner",
                      "nameLocation": "2000:6:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 219,
                      "src": "1984:22:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 216,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1984:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1983:24:2"
                },
                "src": "1965:43:2"
              },
              {
                "body": {
                  "id": 273,
                  "nodeType": "Block",
                  "src": "2321:350:2",
                  "statements": [
                    {
                      "expression": {
                        "id": 239,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 237,
                          "name": "i_entranceFee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 189,
                          "src": "2331:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 238,
                          "name": "entranceFee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 221,
                          "src": "2347:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2331:27:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 240,
                      "nodeType": "ExpressionStatement",
                      "src": "2331:27:2"
                    },
                    {
                      "expression": {
                        "id": 243,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 241,
                          "name": "i_interval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 191,
                          "src": "2368:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 242,
                          "name": "interval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 223,
                          "src": "2381:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2368:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 244,
                      "nodeType": "ExpressionStatement",
                      "src": "2368:21:2"
                    },
                    {
                      "expression": {
                        "id": 249,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 245,
                          "name": "i_vrfCoordinator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 194,
                          "src": "2399:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$153",
                            "typeString": "contract VRFCoordinatorV2Interface"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "arguments": [
                            {
                              "id": 247,
                              "name": "vrfCoordinator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 225,
                              "src": "2444:14:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 246,
                            "name": "VRFCoordinatorV2Interface",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 153,
                            "src": "2418:25:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_VRFCoordinatorV2Interface_$153_$",
                              "typeString": "type(contract VRFCoordinatorV2Interface)"
                            }
                          },
                          "id": 248,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2418:41:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$153",
                            "typeString": "contract VRFCoordinatorV2Interface"
                          }
                        },
                        "src": "2399:60:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$153",
                          "typeString": "contract VRFCoordinatorV2Interface"
                        }
                      },
                      "id": 250,
                      "nodeType": "ExpressionStatement",
                      "src": "2399:60:2"
                    },
                    {
                      "expression": {
                        "id": 253,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 251,
                          "name": "i_keyHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 202,
                          "src": "2469:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 252,
                          "name": "keyHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 227,
                          "src": "2481:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "2469:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "id": 254,
                      "nodeType": "ExpressionStatement",
                      "src": "2469:19:2"
                    },
                    {
                      "expression": {
                        "id": 257,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 255,
                          "name": "i_subscriptionId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 198,
                          "src": "2498:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 256,
                          "name": "subscriptionId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 229,
                          "src": "2517:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "src": "2498:33:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "id": 258,
                      "nodeType": "ExpressionStatement",
                      "src": "2498:33:2"
                    },
                    {
                      "expression": {
                        "id": 261,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 259,
                          "name": "i_callbackGasLimit",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 200,
                          "src": "2541:18:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 260,
                          "name": "callbackGasLimit",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 231,
                          "src": "2562:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "src": "2541:37:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "id": 262,
                      "nodeType": "ExpressionStatement",
                      "src": "2541:37:2"
                    },
                    {
                      "expression": {
                        "id": 266,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 263,
                          "name": "s_lastTimeStamp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 196,
                          "src": "2589:15:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "expression": {
                            "id": 264,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "2607:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 265,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2613:9:2",
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "2607:15:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2589:33:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 267,
                      "nodeType": "ExpressionStatement",
                      "src": "2589:33:2"
                    },
                    {
                      "expression": {
                        "id": 271,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 268,
                          "name": "s_raffleState",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 210,
                          "src": "2632:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RaffleState_$180",
                            "typeString": "enum Raffle.RaffleState"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "expression": {
                            "id": 269,
                            "name": "RaffleState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 180,
                            "src": "2648:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_RaffleState_$180_$",
                              "typeString": "type(enum Raffle.RaffleState)"
                            }
                          },
                          "id": 270,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "2660:4:2",
                          "memberName": "OPEN",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 178,
                          "src": "2648:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RaffleState_$180",
                            "typeString": "enum Raffle.RaffleState"
                          }
                        },
                        "src": "2632:32:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RaffleState_$180",
                          "typeString": "enum Raffle.RaffleState"
                        }
                      },
                      "id": 272,
                      "nodeType": "ExpressionStatement",
                      "src": "2632:32:2"
                    }
                  ]
                },
                "id": 274,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "id": 234,
                        "name": "vrfCoordinator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 225,
                        "src": "2305:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "id": 235,
                    "kind": "baseConstructorSpecifier",
                    "modifierName": {
                      "id": 233,
                      "name": "VRFConsumerBaseV2",
                      "nameLocations": [
                        "2287:17:2"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 57,
                      "src": "2287:17:2"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "2287:33:2"
                  }
                ],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 232,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 221,
                      "mutability": "mutable",
                      "name": "entranceFee",
                      "nameLocation": "2122:11:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 274,
                      "src": "2114:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 220,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2114:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 223,
                      "mutability": "mutable",
                      "name": "interval",
                      "nameLocation": "2151:8:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 274,
                      "src": "2143:16:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 222,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2143:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 225,
                      "mutability": "mutable",
                      "name": "vrfCoordinator",
                      "nameLocation": "2177:14:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 274,
                      "src": "2169:22:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 224,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2169:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 227,
                      "mutability": "mutable",
                      "name": "keyHash",
                      "nameLocation": "2209:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 274,
                      "src": "2201:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 226,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2201:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 229,
                      "mutability": "mutable",
                      "name": "subscriptionId",
                      "nameLocation": "2233:14:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 274,
                      "src": "2226:21:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 228,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "2226:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 231,
                      "mutability": "mutable",
                      "name": "callbackGasLimit",
                      "nameLocation": "2264:16:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 274,
                      "src": "2257:23:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 230,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2257:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2104:182:2"
                },
                "returnParameters": {
                  "id": 236,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2321:0:2"
                },
                "scope": 506,
                "src": "2093:578:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 310,
                  "nodeType": "Block",
                  "src": "2717:311:2",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 280,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 277,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2731:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 278,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2735:5:2",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "2731:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 279,
                          "name": "i_entranceFee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 189,
                          "src": "2743:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2731:25:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 285,
                      "nodeType": "IfStatement",
                      "src": "2727:85:2",
                      "trueBody": {
                        "id": 284,
                        "nodeType": "Block",
                        "src": "2758:54:2",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 281,
                                "name": "Raffle__NotEnoughETH",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 163,
                                "src": "2779:20:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 282,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2779:22:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 283,
                            "nodeType": "RevertStatement",
                            "src": "2772:29:2"
                          }
                        ]
                      }
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_enum$_RaffleState_$180",
                          "typeString": "enum Raffle.RaffleState"
                        },
                        "id": 289,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 286,
                          "name": "s_raffleState",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 210,
                          "src": "2825:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RaffleState_$180",
                            "typeString": "enum Raffle.RaffleState"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "expression": {
                            "id": 287,
                            "name": "RaffleState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 180,
                            "src": "2842:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_RaffleState_$180_$",
                              "typeString": "type(enum Raffle.RaffleState)"
                            }
                          },
                          "id": 288,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "2854:4:2",
                          "memberName": "OPEN",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 178,
                          "src": "2842:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RaffleState_$180",
                            "typeString": "enum Raffle.RaffleState"
                          }
                        },
                        "src": "2825:33:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 294,
                      "nodeType": "IfStatement",
                      "src": "2821:94:2",
                      "trueBody": {
                        "id": 293,
                        "nodeType": "Block",
                        "src": "2860:55:2",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 290,
                                "name": "Raffle__RaffleNotOpen",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 169,
                                "src": "2881:21:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 291,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2881:23:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 292,
                            "nodeType": "RevertStatement",
                            "src": "2874:30:2"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 300,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "2947:3:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 301,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2951:6:2",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2947:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 299,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2939:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_payable_$",
                                "typeString": "type(address payable)"
                              },
                              "typeName": {
                                "id": 298,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2939:8:2",
                                "stateMutability": "payable",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 302,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2939:19:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "expression": {
                            "id": 295,
                            "name": "s_players",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 205,
                            "src": "2924:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                              "typeString": "address payable[] storage ref"
                            }
                          },
                          "id": 297,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2934:4:2",
                          "memberName": "push",
                          "nodeType": "MemberAccess",
                          "src": "2924:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_array$_t_address_payable_$dyn_storage_ptr_$",
                            "typeString": "function (address payable[] storage pointer,address payable)"
                          }
                        },
                        "id": 303,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2924:35:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 304,
                      "nodeType": "ExpressionStatement",
                      "src": "2924:35:2"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 306,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2988:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 307,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2992:6:2",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2988:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 305,
                          "name": "enteredRaffle",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 215,
                          "src": "2974:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 308,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2974:25:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 309,
                      "nodeType": "EmitStatement",
                      "src": "2969:30:2"
                    }
                  ]
                },
                "functionSelector": "2cfcc539",
                "id": 311,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "enterRaffle",
                "nameLocation": "2686:11:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 275,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2697:2:2"
                },
                "returnParameters": {
                  "id": 276,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2717:0:2"
                },
                "scope": 506,
                "src": "2677:351:2",
                "stateMutability": "payable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 370,
                  "nodeType": "Block",
                  "src": "3625:361:2",
                  "statements": [
                    {
                      "assignments": [
                        322
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 322,
                          "mutability": "mutable",
                          "name": "timeHasPassed",
                          "nameLocation": "3640:13:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 370,
                          "src": "3635:18:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 321,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "3635:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 330,
                      "initialValue": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 329,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 326,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 323,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -4,
                                  "src": "3657:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 324,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3663:9:2",
                                "memberName": "timestamp",
                                "nodeType": "MemberAccess",
                                "src": "3657:15:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 325,
                                "name": "s_lastTimeStamp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 196,
                                "src": "3675:15:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3657:33:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 327,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "3656:35:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 328,
                          "name": "i_interval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 191,
                          "src": "3695:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3656:49:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3635:70:2"
                    },
                    {
                      "assignments": [
                        332
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 332,
                          "mutability": "mutable",
                          "name": "isOpen",
                          "nameLocation": "3720:6:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 370,
                          "src": "3715:11:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 331,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "3715:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 337,
                      "initialValue": {
                        "commonType": {
                          "typeIdentifier": "t_enum$_RaffleState_$180",
                          "typeString": "enum Raffle.RaffleState"
                        },
                        "id": 336,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 333,
                            "name": "RaffleState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 180,
                            "src": "3729:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_RaffleState_$180_$",
                              "typeString": "type(enum Raffle.RaffleState)"
                            }
                          },
                          "id": 334,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "3741:4:2",
                          "memberName": "OPEN",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 178,
                          "src": "3729:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RaffleState_$180",
                            "typeString": "enum Raffle.RaffleState"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 335,
                          "name": "s_raffleState",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 210,
                          "src": "3749:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RaffleState_$180",
                            "typeString": "enum Raffle.RaffleState"
                          }
                        },
                        "src": "3729:33:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3715:47:2"
                    },
                    {
                      "assignments": [
                        339
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 339,
                          "mutability": "mutable",
                          "name": "hasBalance",
                          "nameLocation": "3777:10:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 370,
                          "src": "3772:15:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 338,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "3772:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 347,
                      "initialValue": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 346,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 342,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "3798:4:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Raffle_$506",
                                  "typeString": "contract Raffle"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Raffle_$506",
                                  "typeString": "contract Raffle"
                                }
                              ],
                              "id": 341,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3790:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 340,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3790:7:2",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 343,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3790:13:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 344,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3804:7:2",
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "src": "3790:21:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 345,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3814:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3790:25:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3772:43:2"
                    },
                    {
                      "assignments": [
                        349
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 349,
                          "mutability": "mutable",
                          "name": "hasPlayers",
                          "nameLocation": "3830:10:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 370,
                          "src": "3825:15:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 348,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "3825:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 354,
                      "initialValue": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 353,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 350,
                            "name": "s_players",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 205,
                            "src": "3843:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                              "typeString": "address payable[] storage ref"
                            }
                          },
                          "id": 351,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3853:6:2",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "3843:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 352,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3862:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3843:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3825:38:2"
                    },
                    {
                      "expression": {
                        "id": 364,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 355,
                          "name": "upkeepNeeded",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 317,
                          "src": "3873:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 362,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 360,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "id": 358,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 356,
                                    "name": "timeHasPassed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 322,
                                    "src": "3889:13:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "&&",
                                  "rightExpression": {
                                    "id": 357,
                                    "name": "isOpen",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 332,
                                    "src": "3906:6:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "3889:23:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "id": 359,
                                  "name": "hasBalance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 339,
                                  "src": "3916:10:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "3889:37:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "id": 361,
                                "name": "hasPlayers",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 349,
                                "src": "3930:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "3889:51:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "id": 363,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "3888:53:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "3873:68:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 365,
                      "nodeType": "ExpressionStatement",
                      "src": "3873:68:2"
                    },
                    {
                      "expression": {
                        "components": [
                          {
                            "id": 366,
                            "name": "upkeepNeeded",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 317,
                            "src": "3959:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "307830",
                            "id": 367,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3973:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_77b7d82d931e1a403db0240b08c0716665eec4664af617c457918e4a67bc1810",
                              "typeString": "literal_string \"0x0\""
                            },
                            "value": "0x0"
                          }
                        ],
                        "id": 368,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "3958:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_stringliteral_77b7d82d931e1a403db0240b08c0716665eec4664af617c457918e4a67bc1810_$",
                          "typeString": "tuple(bool,literal_string \"0x0\")"
                        }
                      },
                      "functionReturnParameters": 320,
                      "id": 369,
                      "nodeType": "Return",
                      "src": "3951:28:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 312,
                  "nodeType": "StructuredDocumentation",
                  "src": "3082:400:2",
                  "text": " @dev This is the function that the Chainlink Automation nodes call\n to see if it's time to perform an upkeep.\n The following should be true for this to return true:\n 1. The time interval has passed between raffle runs\n 2. The raffle is in the OPEN state\n 3. The contract has ETH (aka, players)\n 4. (Implicit) The subscription is funded with LINK"
                },
                "functionSelector": "6e04ff0d",
                "id": 371,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "checkUpkeep",
                "nameLocation": "3497:11:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 315,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 314,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 371,
                      "src": "3518:12:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 313,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "3518:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3508:44:2"
                },
                "returnParameters": {
                  "id": 320,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 317,
                      "mutability": "mutable",
                      "name": "upkeepNeeded",
                      "nameLocation": "3579:12:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 371,
                      "src": "3574:17:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 316,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3574:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 319,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 371,
                      "src": "3593:12:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 318,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "3593:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3573:51:2"
                },
                "scope": 506,
                "src": "3488:498:2",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 415,
                  "nodeType": "Block",
                  "src": "4211:621:2",
                  "statements": [
                    {
                      "assignments": [
                        377,
                        null
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 377,
                          "mutability": "mutable",
                          "name": "upkeepNeeded",
                          "nameLocation": "4227:12:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 415,
                          "src": "4222:17:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 376,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "4222:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        },
                        null
                      ],
                      "id": 381,
                      "initialValue": {
                        "arguments": [
                          {
                            "hexValue": "",
                            "id": 379,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4257:2:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            }
                          ],
                          "id": 378,
                          "name": "checkUpkeep",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 371,
                          "src": "4245:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                          }
                        },
                        "id": 380,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4245:15:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "4221:39:2"
                    },
                    {
                      "condition": {
                        "id": 383,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "4274:13:2",
                        "subExpression": {
                          "id": 382,
                          "name": "upkeepNeeded",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 377,
                          "src": "4275:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 399,
                      "nodeType": "IfStatement",
                      "src": "4270:201:2",
                      "trueBody": {
                        "id": 398,
                        "nodeType": "Block",
                        "src": "4289:182:2",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 387,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "4359:4:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_Raffle_$506",
                                          "typeString": "contract Raffle"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_Raffle_$506",
                                          "typeString": "contract Raffle"
                                        }
                                      ],
                                      "id": 386,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "4351:7:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 385,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "4351:7:2",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 388,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4351:13:2",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "id": 389,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "4365:7:2",
                                  "memberName": "balance",
                                  "nodeType": "MemberAccess",
                                  "src": "4351:21:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 390,
                                    "name": "s_players",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 205,
                                    "src": "4390:9:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                      "typeString": "address payable[] storage ref"
                                    }
                                  },
                                  "id": 391,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "4400:6:2",
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "4390:16:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "id": 394,
                                      "name": "s_raffleState",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 210,
                                      "src": "4432:13:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_RaffleState_$180",
                                        "typeString": "enum Raffle.RaffleState"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_enum$_RaffleState_$180",
                                        "typeString": "enum Raffle.RaffleState"
                                      }
                                    ],
                                    "id": 393,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4424:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 392,
                                      "name": "uint256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4424:7:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 395,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4424:22:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 384,
                                "name": "Raffle__UpkeepNotNeeded",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 177,
                                "src": "4310:23:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                                  "typeString": "function (uint256,uint256,uint256) pure"
                                }
                              },
                              "id": 396,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4310:150:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 397,
                            "nodeType": "RevertStatement",
                            "src": "4303:157:2"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "id": 403,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 400,
                          "name": "s_raffleState",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 210,
                          "src": "4480:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RaffleState_$180",
                            "typeString": "enum Raffle.RaffleState"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "expression": {
                            "id": 401,
                            "name": "RaffleState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 180,
                            "src": "4496:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_RaffleState_$180_$",
                              "typeString": "type(enum Raffle.RaffleState)"
                            }
                          },
                          "id": 402,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "4508:11:2",
                          "memberName": "CALCULATING",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 179,
                          "src": "4496:23:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RaffleState_$180",
                            "typeString": "enum Raffle.RaffleState"
                          }
                        },
                        "src": "4480:39:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RaffleState_$180",
                          "typeString": "enum Raffle.RaffleState"
                        }
                      },
                      "id": 404,
                      "nodeType": "ExpressionStatement",
                      "src": "4480:39:2"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 408,
                            "name": "i_keyHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 202,
                            "src": "4674:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 409,
                            "name": "i_subscriptionId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 198,
                            "src": "4709:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          {
                            "id": 410,
                            "name": "REQUEST_CONFIRMATIONS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 184,
                            "src": "4739:21:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          {
                            "id": 411,
                            "name": "i_callbackGasLimit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 200,
                            "src": "4774:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          {
                            "id": 412,
                            "name": "NUM_WORDS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 187,
                            "src": "4806:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            },
                            {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            },
                            {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            },
                            {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          ],
                          "expression": {
                            "id": 405,
                            "name": "i_vrfCoordinator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 194,
                            "src": "4625:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$153",
                              "typeString": "contract VRFCoordinatorV2Interface"
                            }
                          },
                          "id": 407,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4642:18:2",
                          "memberName": "requestRandomWords",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 86,
                          "src": "4625:35:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$",
                            "typeString": "function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"
                          }
                        },
                        "id": 413,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4625:200:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 414,
                      "nodeType": "ExpressionStatement",
                      "src": "4625:200:2"
                    }
                  ]
                },
                "functionSelector": "4585e33b",
                "id": 416,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "performUpkeep",
                "nameLocation": "4154:13:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 374,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 373,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 416,
                      "src": "4168:14:2",
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_calldata_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 372,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "4168:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4167:34:2"
                },
                "returnParameters": {
                  "id": 375,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "4211:0:2"
                },
                "scope": 506,
                "src": "4145:687:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "baseFunctions": [
                  30
                ],
                "body": {
                  "id": 486,
                  "nodeType": "Block",
                  "src": "5003:774:2",
                  "statements": [
                    {
                      "assignments": [
                        426
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 426,
                          "mutability": "mutable",
                          "name": "indexOfWinner",
                          "nameLocation": "5077:13:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 486,
                          "src": "5069:21:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 425,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "5069:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 433,
                      "initialValue": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 432,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 427,
                            "name": "randomWords",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 421,
                            "src": "5093:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "id": 429,
                          "indexExpression": {
                            "hexValue": "30",
                            "id": 428,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5105:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5093:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "%",
                        "rightExpression": {
                          "expression": {
                            "id": 430,
                            "name": "s_players",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 205,
                            "src": "5110:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                              "typeString": "address payable[] storage ref"
                            }
                          },
                          "id": 431,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5120:6:2",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "5110:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5093:33:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "5069:57:2"
                    },
                    {
                      "assignments": [
                        435
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 435,
                          "mutability": "mutable",
                          "name": "winner",
                          "nameLocation": "5152:6:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 486,
                          "src": "5136:22:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          "typeName": {
                            "id": 434,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5136:15:2",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 439,
                      "initialValue": {
                        "baseExpression": {
                          "id": 436,
                          "name": "s_players",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "5161:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                            "typeString": "address payable[] storage ref"
                          }
                        },
                        "id": 438,
                        "indexExpression": {
                          "id": 437,
                          "name": "indexOfWinner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 426,
                          "src": "5171:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5161:24:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "5136:49:2"
                    },
                    {
                      "expression": {
                        "id": 442,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 440,
                          "name": "s_recentWinner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 207,
                          "src": "5195:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 441,
                          "name": "winner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 435,
                          "src": "5212:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "5195:23:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 443,
                      "nodeType": "ExpressionStatement",
                      "src": "5195:23:2"
                    },
                    {
                      "expression": {
                        "id": 447,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 444,
                          "name": "s_raffleState",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 210,
                          "src": "5282:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RaffleState_$180",
                            "typeString": "enum Raffle.RaffleState"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "expression": {
                            "id": 445,
                            "name": "RaffleState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 180,
                            "src": "5298:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_RaffleState_$180_$",
                              "typeString": "type(enum Raffle.RaffleState)"
                            }
                          },
                          "id": 446,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "5310:4:2",
                          "memberName": "OPEN",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 178,
                          "src": "5298:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RaffleState_$180",
                            "typeString": "enum Raffle.RaffleState"
                          }
                        },
                        "src": "5282:32:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RaffleState_$180",
                          "typeString": "enum Raffle.RaffleState"
                        }
                      },
                      "id": 448,
                      "nodeType": "ExpressionStatement",
                      "src": "5282:32:2"
                    },
                    {
                      "expression": {
                        "id": 455,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 449,
                          "name": "s_players",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "5366:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                            "typeString": "address payable[] storage ref"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 453,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5400:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 452,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "5378:21:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_payable_$dyn_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (address payable[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 450,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5382:15:2",
                                "stateMutability": "payable",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 451,
                              "nodeType": "ArrayTypeName",
                              "src": "5382:17:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                                "typeString": "address payable[]"
                              }
                            }
                          },
                          "id": 454,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5378:24:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                            "typeString": "address payable[] memory"
                          }
                        },
                        "src": "5366:36:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                          "typeString": "address payable[] storage ref"
                        }
                      },
                      "id": 456,
                      "nodeType": "ExpressionStatement",
                      "src": "5366:36:2"
                    },
                    {
                      "expression": {
                        "id": 460,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 457,
                          "name": "s_lastTimeStamp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 196,
                          "src": "5412:15:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "expression": {
                            "id": 458,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "5430:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 459,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5436:9:2",
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "5430:15:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5412:33:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 461,
                      "nodeType": "ExpressionStatement",
                      "src": "5412:33:2"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 463,
                            "name": "winner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 435,
                            "src": "5522:6:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 462,
                          "name": "winnerPicked",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 219,
                          "src": "5509:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 464,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5509:20:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 465,
                      "nodeType": "EmitStatement",
                      "src": "5504:25:2"
                    },
                    {
                      "assignments": [
                        467,
                        null
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 467,
                          "mutability": "mutable",
                          "name": "success",
                          "nameLocation": "5633:7:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 486,
                          "src": "5628:12:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 466,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "5628:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        },
                        null
                      ],
                      "id": 478,
                      "initialValue": {
                        "arguments": [
                          {
                            "hexValue": "",
                            "id": 476,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5688:2:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "id": 468,
                              "name": "winner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 435,
                              "src": "5646:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "id": 469,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5653:4:2",
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "5646:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 475,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "names": [
                            "value"
                          ],
                          "nodeType": "FunctionCallOptions",
                          "options": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 472,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "5673:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_Raffle_$506",
                                      "typeString": "contract Raffle"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_Raffle_$506",
                                      "typeString": "contract Raffle"
                                    }
                                  ],
                                  "id": 471,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5665:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 470,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5665:7:2",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 473,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5665:13:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 474,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5679:7:2",
                              "memberName": "balance",
                              "nodeType": "MemberAccess",
                              "src": "5665:21:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "src": "5646:41:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 477,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5646:45:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "5627:64:2"
                    },
                    {
                      "condition": {
                        "id": 480,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "5705:8:2",
                        "subExpression": {
                          "id": 479,
                          "name": "success",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 467,
                          "src": "5706:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 485,
                      "nodeType": "IfStatement",
                      "src": "5701:70:2",
                      "trueBody": {
                        "id": 484,
                        "nodeType": "Block",
                        "src": "5715:56:2",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 481,
                                "name": "Raffle__TransferFailed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 167,
                                "src": "5736:22:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 482,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5736:24:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 483,
                            "nodeType": "RevertStatement",
                            "src": "5729:31:2"
                          }
                        ]
                      }
                    }
                  ]
                },
                "id": 487,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "fulfillRandomWords",
                "nameLocation": "4889:18:2",
                "nodeType": "FunctionDefinition",
                "overrides": {
                  "id": 423,
                  "nodeType": "OverrideSpecifier",
                  "overrides": [],
                  "src": "4994:8:2"
                },
                "parameters": {
                  "id": 422,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 418,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 487,
                      "src": "4917:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 417,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4917:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 421,
                      "mutability": "mutable",
                      "name": "randomWords",
                      "nameLocation": "4967:11:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 487,
                      "src": "4950:28:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 419,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4950:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 420,
                        "nodeType": "ArrayTypeName",
                        "src": "4950:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4907:77:2"
                },
                "returnParameters": {
                  "id": 424,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "5003:0:2"
                },
                "scope": 506,
                "src": "4880:897:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 495,
                  "nodeType": "Block",
                  "src": "5869:37:2",
                  "statements": [
                    {
                      "expression": {
                        "id": 493,
                        "name": "i_entranceFee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 189,
                        "src": "5886:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 492,
                      "id": 494,
                      "nodeType": "Return",
                      "src": "5879:20:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 488,
                  "nodeType": "StructuredDocumentation",
                  "src": "5783:23:2",
                  "text": "Getter Functions "
                },
                "functionSelector": "09bc33a7",
                "id": 496,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getEntranceFee",
                "nameLocation": "5820:14:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 489,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "5834:2:2"
                },
                "returnParameters": {
                  "id": 492,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 491,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 496,
                      "src": "5860:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 490,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5860:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5859:9:2"
                },
                "scope": 506,
                "src": "5811:95:2",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 504,
                  "nodeType": "Block",
                  "src": "5974:37:2",
                  "statements": [
                    {
                      "expression": {
                        "id": 502,
                        "name": "s_raffleState",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 210,
                        "src": "5991:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RaffleState_$180",
                          "typeString": "enum Raffle.RaffleState"
                        }
                      },
                      "functionReturnParameters": 501,
                      "id": 503,
                      "nodeType": "Return",
                      "src": "5984:20:2"
                    }
                  ]
                },
                "functionSelector": "115cbaf5",
                "id": 505,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getRaffleState",
                "nameLocation": "5921:14:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 497,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "5935:2:2"
                },
                "returnParameters": {
                  "id": 501,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 500,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 505,
                      "src": "5961:11:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_RaffleState_$180",
                        "typeString": "enum Raffle.RaffleState"
                      },
                      "typeName": {
                        "id": 499,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 498,
                          "name": "RaffleState",
                          "nameLocations": [
                            "5961:11:2"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 180,
                          "src": "5961:11:2"
                        },
                        "referencedDeclaration": 180,
                        "src": "5961:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RaffleState_$180",
                          "typeString": "enum Raffle.RaffleState"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5960:13:2"
                },
                "scope": 506,
                "src": "5912:99:2",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 507,
            "src": "847:5166:2",
            "usedErrors": [
              8,
              163,
              165,
              167,
              169,
              177
            ],
            "usedEvents": [
              215,
              219
            ]
          }
        ],
        "src": "456:5558:2"
      }
    }
  },
  "errors": [],
  "version": "0.8.24",
  "long_version": "0.8.24+commit.e11b9ed9.Darwin.appleclang",
  "zk_version": "1.4.1"
}